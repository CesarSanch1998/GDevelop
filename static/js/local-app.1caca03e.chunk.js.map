{"version":3,"sources":["LocalApp.js","ProjectCreation/LocalStarters.js","ProjectCreation/LocalExamplesFinder.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","../node_modules/@supercharge/promise-pool/dist/index.js","../node_modules/@supercharge/promise-pool/dist/promise-pool.js","../node_modules/@supercharge/promise-pool/dist/promise-pool-executor.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@supercharge/promise-pool/dist/promise-pool-error.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct.js","Export/LocalExporters/LocalFileSystem.js","UI/LocalFolderPicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","ProjectCreation/LocalExamples.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","Utils/LocalUserInfo.js"],"names":["gd","global","create","authentication","Window","setUpContextMenu","appArguments","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","makeLocalEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","LocalEventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","LocalEventsFunctionsExtensionOpener","resourceFetcher","LocalResourceFetcher","i18n","storageProviders","LocalFileStorageProvider","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","props","renderPreviewLauncher","ref","renderExportDialog","exporters","getLocalExporters","renderCreateDialog","examplesComponent","LocalExamples","startersComponent","LocalStarters","renderGDJSDevelopmentWatcher","resourceSources","localResourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","objectsEditorService","ObjectsEditorService","objectsRenderingService","ObjectsRenderingService","filterExamples","path","optionalRequire","fs","exampleName","outputPath","this","findExamples","examplesPath","mkdirsSync","copySync","join","error","showGameFileCreationError","onOpen","fileIdentifier","sendNewGameCreated","project","ProjectHelper","createNewGDJSProject","filePath","setProjectFile","onCreate","noMargin","expand","fullWidth","value","onChange","onChangeOutputPath","type","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","createFromExample","createEmptyGame","alignItems","justifyContent","label","onShowExamples","Component","electron","app","remote","process","tryPath","onExists","onNoAccess","access","constants","R_OK","err","cb","appPath","getAppPath","cwd","dialog","name","displayName","kind","component","chooseResources","multiSelections","getLastUsedPath","setLastUsedPath","options","title","_","extensions","selectLocalResourcePath","then","resources","map","resourcePath","audioResource","AudioResource","projectPath","dirname","getProjectFile","setFile","relative","setName","imageResource","ImageResource","fontResource","FontResource","videoResource","VideoResource","jsonResource","JsonResource","bitmapFontResource","BitmapFontResource","Promise","reject","properties","push","latestPath","browserWindow","getCurrentWindow","showOpenDialog","filters","defaultPath","filePaths","length","lastUsedPath","parse","dir","filter","isPathInProjectFolder","showConfirmDialog","copyAllToProjectFolder","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","ipcRenderer","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resourceName","originalIndex","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","resourcesManager","getResourcesManager","forEach","resource","createOrUpdateResource","getResource","setMetadata","JSON","stringify","send","newFilePath","jfxr","BrowserWindow","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","devToolsOpen","previewBrowserWindowConfig","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","win","loadURL","setMenuBarVisibility","setAlwaysOnTop","webContents","setState","openDevTools","_openPreviewWindow","gamePath","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","nodeIntegration","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","console","info","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getServerAddress","setDebuggerServerAddress","address","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","time","LocalPreviewDebuggerServer","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","React","LocalNetworkDialog","actions","key","primary","secondaryActions","cannotBeDismissed","onRequestClose","debuggerServerState","debuggerServerAddress","callbacksList","resolve","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","e","warn","serverStartTimeoutPromise","Error","race","getServerState","registerCallbacks","callbacks","callbacksIndex","renderIcon","helpPage","description","exportPipeline","localOnlineCordovaExportPipeline","localOnlineWebExportPipeline","localHTML5ExportPipeline","advanced","localFacebookInstantGamesExportPipeline","localCordovaExportPipeline","localOnlineElectronExportPipeline","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","renderHeader","updateExportState","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openItem","renderGameButton","archiveOutputFilename","getPath","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","styles","container","position","display","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","undefined","margin","hintText","PureComponent","os","onlineBuildType","targets","keystore","signingDialogOpen","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","launchOnlineBuild","authenticatedUser","uploadBucketKey","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","uid","buildElectron","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onSaveProject","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenStartPage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","fileMetadata","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","onFindGDJS","loadAllExtensions","extensionModulePaths","all","extensionModulePath","extensionModule","rethrowException","ex","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","onWriteFile","getUID","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","content","writeFile","writeBehaviorCode","behaviorCodeNamespace","chooseEventsFunctionExtensionFile","writeEventsFunctionsExtension","extension","filepath","object","ensureDir","stringifyException","writeJSONFile","serializeToJSObject","readEventsFunctionExtensionFile","readFile","encoding","dataObject","readJSONFile","child_process","chokidar","findDevelopmentNewIdeAppPath","developmentElectronAppFolder","importGDJSRuntime","startTime","performance","now","exec","stdout","stderr","duration","toFixed","onWatchEvent","debounce","filename","eventName","resolvedFilename","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","watchPaths","watchPath","watcher","watch","awaitWriteFinish","ignoreInitial","totalTimeStr","close","getResourcesToFetch","getAllResourceNames","toJSArray","getFile","startsWith","fetchResources","a","onProgress","baseAssetsPath","downloadedFilePaths","Set","erroredResources","fetchedResources","fetchedResourcesCount","resourcesToFetch","PromisePool","withConcurrency","for","extname","filenameWithoutExtension","basename","newNameGenerator","tentativePath","existsSync","has","newPath","add","invoke","replace","promise_pool_1","Object","defineProperty","promise_pool_executor_1","items","concurrency","errorHandler","callback","PromisePoolExecutor","withHandler","handleError","start","promise_pool_error_1","tasks","errors","results","action","activeCount","validateInputs","TypeError","Array","isArray","hasReachedConcurrencyLimit","processingSlot","startProcessing","drained","waitForTaskToFinish","task","createTaskFor","PromisePoolError","createFrom","drainActiveTasks","unsupportedIterableToArray","o","Symbol","iterator","i","F","s","n","done","_e","f","it","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","prototype","toString","call","slice","constructor","from","test","arr","len","arr2","messageFrom","captureStackTrace","getPrototypeOf","setPrototypeOf","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","Wrapper","arguments","enumerable","writable","configurable","fn","Function","isNativeReflectConstruct","_construct","Parent","args","Reflect","apply","instance","bind","dirExists","emptyDirSync","fileNameFrom","fullPath","_isExternalUrl","_translateUrl","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","charAt","copyFile","source","dest","writeToFile","file","contents","outputFileSync","readFileSync","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","statSync","substr","LocalFolderPicker","_onChooseFolder","_getTitleAndMessage","titleAndMessage","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","log","pointer","pipe","directory","finalize","localFilePath","stepCurrentProgress","stepMaxProgress","onOpenWithPicker","unsplit","getReferencePartialObject","referencePath","isReferenceMagicPropertyName","maxUnsplitDepth","hasAutoSave","compareLastModified","autoSavePath","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","onAutoSaveProject","getOpenErrorMessage","showErrorBox","errorId","isOpening","setIsOpening","useFullHeight","exampleShortHeader","getExample","example","axios","projectFileUrl","responseType","transformResponse","response","projectFileContent","writeAndCheckFile","split","pathSeparator","getArrayItemReferenceName","shouldSplit","partialObjects","createReference","reference","splitObject","currentObject","currentPath","currentReference","index","itemPath","partialObject","itemReference","propertyName","propertyPath","propertyReference","unsplitObject","depth","keys","indexOrPropertyName","isReference","referenceTo","splitPaths","paths","getSlugifiedUniqueNameFromProperty","existingNamesForReference","property","newName","checkFileContent","expectedContent","verificationTime","writeAndCheckFormattedJSONFile","writeProjectFiles","serializedProjectObject","isFolderProject","wasSaved","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","serializeToJSON","userInfo"],"mappings":"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","file":"static/js/local-app.1caca03e.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for Electron powered IDE.\nimport LocalExamples from './ProjectCreation/LocalExamples';\nimport LocalStarters from './ProjectCreation/LocalStarters';\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport { getLocalExporters } from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport { LocalResourceFetcher } from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n      resourceFetcher={LocalResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={\n            // Add Url provider\n            [LocalFileStorageProvider]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog {...props} exporters={getLocalExporters()} />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={LocalExamples}\n                  startersComponent={LocalStarters}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport RaisedButton from '../UI/RaisedButton';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport Text from '../UI/Text';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ListIcon from '../UI/ListIcon';\nimport { showGameFileCreationError } from './LocalExamples';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onShowExamples: () => void,\n  outputPath: string,\n|};\n\ntype State = {||};\n\nexport default class LocalStarters extends Component<Props, State> {\n  createFromExample(i18n: I18nType, exampleName: string) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  }\n\n  createEmptyGame(i18n: I18nType) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    try {\n      fs.mkdirsSync(outputPath);\n    } catch (error) {\n      showGameFileCreationError(i18n, outputPath, error);\n      return;\n    }\n\n    const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n    const filePath = path.join(outputPath, 'game.json');\n    project.setProjectFile(filePath);\n    this.props.onCreate(project, LocalFileStorageProvider, {\n      fileIdentifier: filePath,\n    });\n    sendNewGameCreated('');\n  }\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose a game to use as a starter:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column expand noMargin>\n                <List>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/platformer.png\"\n                      />\n                    }\n                    primaryText={<Trans>Platformer</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A simple platform game, with coins to collect, moving\n                        platforms and enemies.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'platformer')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/space-shooter.png\"\n                      />\n                    }\n                    primaryText={<Trans>8-bit Space Shooter</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A beautiful, retro side-scrolling shooter where you must\n                        defeat incoming enemies with your mecha transforming\n                        spaceship. Huge boss included!\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'space-shooter')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/geometry-monster.png\"\n                      />\n                    }\n                    primaryText={<Trans>Geometry Monster</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A hyper casual endless game where you have to collect\n                        shapes and avoid bombs, with a progressively increasing\n                        difficulty.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'geometry-monster')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/isometric-game.png\"\n                      />\n                    }\n                    primaryText={<Trans>Isometric game</Trans>}\n                    secondaryText={\n                      <Trans>\n                        An example of an isometric game where you can explore a\n                        map with your character.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'isometric-game')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                      />\n                    }\n                    primaryText=\"Downhill Bike Racing\"\n                    secondaryText={\n                      <Trans>\n                        An example of a 2D physics based game, where players\n                        have to reach the end as fast as possible.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'downhill-bike-physics-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/pairs.png\"\n                      />\n                    }\n                    primaryText=\"Pairs\"\n                    secondaryText={\n                      <Trans>\n                        Find all matching pairs of cards in this relaxing game.\n                        Use tweens to create smooth, natural animations with a\n                        few events.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'pairs')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/new.png\"\n                      />\n                    }\n                    primaryText={<Trans>Empty game</Trans>}\n                    secondaryText={\n                      <Trans>Start a new game from scratch.</Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createEmptyGame(i18n)}\n                  />\n                  <Subheader>\n                    <Trans>Advanced</Trans>\n                  </Subheader>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/particle-effects-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Particle Effects Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo of various high quality particle effects (fire,\n                        magic, snow, rune spell...) that you can try and use in\n                        your game.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'particle-effects-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/game-feel-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Game Feel Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo showing how to enhance the \"game feel\" of your\n                        project: VFX, shot trail, ambient sounds and SFX,\n                        screenshake, wobble...\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'game-feel-demo')\n                    }\n                  />\n                </List>\n                <Line alignItems=\"center\" justifyContent=\"center\">\n                  <RaisedButton\n                    label={<Trans>See examples</Trans>}\n                    onClick={() => this.props.onShowExamples()}\n                  />\n                </Line>\n              </Column>\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst app = electron ? electron.remote.app : null;\nconst fs = optionalRequire('fs');\nconst process = optionalRequire('process');\n\nconst tryPath = (\n  path: string,\n  onExists: string => void,\n  onNoAccess: Function\n) =>\n  fs.access(path, fs.constants.R_OK, err => {\n    if (!err) onExists(path);\n    else onNoAccess();\n  });\n\nexport const findExamples = (cb: (?string) => void) => {\n  if (!process || !fs) return '';\n\n  const appPath = app ? app.getAppPath() : process.cwd();\n\n  // First try to find examples in app resources folder\n  tryPath(path.join(appPath, '..', 'examples'), cb, () => {\n    tryPath(\n      path.join(appPath, '..', '..', 'app', 'resources', 'examples'),\n      cb,\n      () => {\n        cb(null);\n      }\n    );\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport { Component } from 'react';\nimport {\n  isPathInProjectFolder,\n  copyAllToProjectFolder,\n} from './ResourceUtils.js';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport Window from '../Utils/Window';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nexport default [\n  {\n    name: 'localAudioFileOpener',\n    displayName: 'Choose a new audio file',\n    kind: 'audio',\n    component: class LocalAudioFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an audio file`),\n          name: i18n._(t`Audio files`),\n          extensions: ['aac', 'wav', 'mp3', 'ogg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'audio'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const audioResource = new gd.AudioResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            audioResource.setFile(path.relative(projectPath, resourcePath));\n            audioResource.setName(path.relative(projectPath, resourcePath));\n\n            return audioResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFileOpener',\n    displayName: 'Choose a new image',\n    kind: 'image',\n    component: class LocalFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an image`),\n          name: i18n._(t`Image files`),\n          extensions: ['png', 'jpg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'image'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const imageResource = new gd.ImageResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            imageResource.setFile(path.relative(projectPath, resourcePath));\n            imageResource.setName(path.relative(projectPath, resourcePath));\n\n            return imageResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFontFileOpener',\n    displayName: 'Choose a new font file',\n    kind: 'font',\n    component: class LocalFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a font file`),\n          name: i18n._(t`Font files`),\n          extensions: ['ttf', 'otf'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'font'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const fontResource = new gd.FontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            fontResource.setFile(path.relative(projectPath, resourcePath));\n            fontResource.setName(path.relative(projectPath, resourcePath));\n\n            return fontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localVideoFileOpener',\n    displayName: 'Choose a new video file',\n    kind: 'video',\n    component: class LocalVideoFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a video file`),\n          name: i18n._(t`Video files`),\n          extensions: ['mp4'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'video'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const videoResource = new gd.VideoResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            videoResource.setFile(path.relative(projectPath, resourcePath));\n            videoResource.setName(path.relative(projectPath, resourcePath));\n\n            return videoResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localJsonFileOpener',\n    displayName: 'Choose a new json file',\n    kind: 'json',\n    component: class LocalJsonFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a json file`),\n          name: i18n._(t`JSON file`),\n          extensions: ['json'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'json'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const jsonResource = new gd.JsonResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            jsonResource.setFile(path.relative(projectPath, resourcePath));\n            jsonResource.setName(path.relative(projectPath, resourcePath));\n\n            return jsonResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localBitmapFontFileOpener',\n    displayName: 'Choose a new bitmap font file (.fnt, .xml)',\n    kind: 'bitmapFont',\n    component: class LocalBitmapFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a bitmap font file`),\n          name: i18n._(t`FNT, XML file`),\n          extensions: ['fnt', 'xml'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'bitmapFont'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const bitmapFontResource = new gd.BitmapFontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            bitmapFontResource.setFile(\n              path.relative(projectPath, resourcePath)\n            );\n            bitmapFontResource.setName(\n              path.relative(projectPath, resourcePath)\n            );\n\n            return bitmapFontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n];\n\nconst selectLocalResourcePath = (\n  i18n: I18nType,\n  project: gdProject,\n  options: {\n    multiSelections: boolean,\n    title: string,\n    name: string,\n    extensions: Array<string>,\n  },\n  getLastUsedPath: (project: gdProject, kind: ResourceKind) => string,\n  setLastUsedPath: (\n    project: gdProject,\n    kind: ResourceKind,\n    path: string\n  ) => void,\n  kind: ResourceKind\n): Promise<Array<string>> => {\n  if (!dialog) return Promise.reject('Not supported');\n\n  const properties = ['openFile'];\n  if (options.multiSelections) properties.push('multiSelections');\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: options.title,\n      properties,\n      filters: [{ name: options.name, extensions: options.extensions }],\n      defaultPath: latestPath,\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return [];\n\n      const lastUsedPath = path.parse(filePaths[0]).dir;\n      setLastUsedPath(project, kind, lastUsedPath);\n\n      const outsideProjectFolderPaths = filePaths.filter(\n        path => !isPathInProjectFolder(project, path)\n      );\n\n      if (outsideProjectFolderPaths.length) {\n        const answer = Window.showConfirmDialog(\n          i18n._(\n            t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n          )\n        );\n\n        if (answer) {\n          return copyAllToProjectFolder(project, filePaths);\n        }\n      }\n\n      return filePaths;\n    });\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport { LocalPreviewDebuggerServer } from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst BrowserWindow = electron ? electron.remote.BrowserWindow : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  devToolsOpen: boolean,\n  previewBrowserWindowConfig: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    devToolsOpen: false,\n    previewBrowserWindowConfig: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    if (\n      !BrowserWindow ||\n      !this.state.previewBrowserWindowConfig ||\n      !this.state.previewGamePath\n    )\n      return;\n\n    const win = new BrowserWindow(this.state.previewBrowserWindowConfig);\n    win.loadURL(`file://${this.state.previewGamePath}/index.html`);\n    win.setMenuBarVisibility(this.state.hideMenuBar);\n    win.setAlwaysOnTop(this.state.alwaysOnTop);\n    win.webContents.on('devtools-opened', () => {\n      this.setState({ devToolsOpen: true });\n    });\n    win.webContents.on('devtools-closed', () => {\n      this.setState({ devToolsOpen: false });\n    });\n    if (this.state.devToolsOpen) win.openDevTools();\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowConfig: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            nodeIntegration: true,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = this.getPreviewDebuggerServer().getServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.setDebuggerServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return LocalPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const LocalPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getServerAddress: () => debuggerServerAddress,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport.js';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport.js';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getLocalExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'localonlinecordovaexport',\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'localonlinewebexport',\n    exportPipeline: localOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>Local folder</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'localexport',\n    exportPipeline: localHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'localfacebookinstantgames',\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually to\n        iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'localcordovaexport',\n    exportPipeline: localCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'localonlineelectronexport',\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'localelectronexport',\n    exportPipeline: localElectronExportPipeline,\n    advanced: true,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openItem(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  canLaunchBuild: () => true,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, firebaseUser.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-start-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { label: i18n._(t`Undo`), role: 'undo' },\n      { label: i18n._(t`Redo`), role: 'redo' },\n      { type: 'separator' },\n      { label: i18n._(t`Cut`), role: 'cut' },\n      { label: i18n._(t`Copy`), role: 'copy' },\n      { label: i18n._(t`Paste`), role: 'paste' },\n      { label: i18n._(t`Paste and Match Style`), role: 'pasteandmatchstyle' },\n      { label: i18n._(t`Delete`), role: 'delete' },\n      { label: i18n._(t`Select All`), role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Start Page`),\n        onClickSendEvent: 'main-menu-open-start-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Developer Tools`), role: 'toggledevtools' },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Fullscreen`), role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop-app.com',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop-app.com',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/gdevelop',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop-app.com/contribute/',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-start-page', props.onOpenStartPage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { getUID } from '../../Utils/LocalUserInfo.js';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nimport debounce from 'lodash/debounce';\nconst electron = optionalRequire('electron');\nconst child_process = optionalRequire('child_process');\nconst process = optionalRequire('process');\nconst path = optionalRequire('path');\nconst chokidar = optionalRequire('chokidar');\n\n/**\n * Returns the folder corresponding to newIDE/app in **development**. Works\n * only when running in Electron.\n */\nconst findDevelopmentNewIdeAppPath = (): string => {\n  if (!electron) return '';\n\n  const developmentElectronAppFolder = process.cwd();\n  return path.join(developmentElectronAppFolder, '../app');\n};\n\n/**\n * Launch the newIDE script `import-GDJS-Runtime`.\n * Cleaning the GDJS output folder and copying sources are both\n * skipped to speed up the build.\n */\nconst importGDJSRuntime = (): Promise<void> => {\n  if (!child_process || !path) return Promise.reject(new Error('Unsupported'));\n\n  return new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    child_process.exec(\n      `node \"${path.join(\n        findDevelopmentNewIdeAppPath(),\n        'scripts/import-GDJS-Runtime.js'\n      )}\" --skip-clean --skip-sources`,\n      (error, stdout, stderr) => {\n        if (error) {\n          console.error(`GDJS Runtime update error:\\n${error}`);\n          reject(error);\n          return;\n        }\n\n        const duration = (performance.now() - startTime).toFixed(0);\n        console.info(`GDJS Runtime updated in ${duration}ms:\\n${stdout}`);\n\n        if (stderr) {\n          console.error(`GDJS Runtime update error:\\n${stderr}`);\n          reject(new Error('Error while updating GDJS Runtime'));\n          return;\n        }\n\n        resolve();\n      }\n    );\n  });\n};\n\n/**\n * Callback for fs.watch, so that  whenever a source file is changed,\n * it relaunchs automatically the script to import.\n */\nconst onWatchEvent = debounce((event: ?string, filename: ?string) => {\n  const eventName = event || 'unknown-event';\n  const resolvedFilename = filename || 'unknown-file';\n  console.info(\n    `GDJS/extensions watchers found a \"${eventName}\" in ${resolvedFilename}, updating GDJS Runtime...`\n  );\n  importGDJSRuntime().catch(() => {});\n}, 100 /* Avoid running the script too much in case multiple changes are fired at the same time. */);\n\nconst genericWatcherErrorMessage =\n  'Error in watcher for GDJS Runtime - manually call npm run `node import-GDJS-Runtime.js` in the newIDE/app/scripts folder if you make changes to GDJS. Error:';\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      const startTime = performance.now();\n      if (!chokidar) {\n        console.error(\n          \"Unable to use 'chokidar' from Node.js to watch changes in GDJS.\"\n        );\n        return;\n      }\n\n      const relativeWatchPaths = [\n        // Watch all files in GDJS Runtime:\n        '../../GDJS/Runtime/**/*',\n        // Watch only JS/TS source files in extensions:\n        '../../Extensions/**/*.ts',\n        '../../Extensions/**/*.js',\n      ];\n      const watchPaths = relativeWatchPaths.map(watchPath =>\n        path.join(findDevelopmentNewIdeAppPath(), watchPath)\n      );\n\n      // Reload extensions when the component is first mounted\n      importGDJSRuntime().catch(() => {});\n\n      const watcher = chokidar\n        .watch(watchPaths, {\n          awaitWriteFinish: true,\n          ignoreInitial: true,\n        })\n        .on('all', onWatchEvent)\n        .on('error', e => console.error(genericWatcherErrorMessage, e))\n        .on('ready', () => {\n          const totalTimeStr = (performance.now() - startTime).toFixed(2);\n          console.info(\n            `Watchers for GDJS Runtime/extensions installed in ${totalTimeStr}ms.`\n          );\n        });\n\n      return () => watcher.close();\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\nimport PromisePool from '@supercharge/promise-pool';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isExternalUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  const resourcesManager = project.getResourcesManager();\n\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  return allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isExternalUrl(resource.getFile());\n  });\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n  const resourcesManager = project.getResourcesManager();\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n  const fetchedResources = [];\n\n  let fetchedResourcesCount = 0;\n  const resourcesToFetch = getResourcesToFetch(project);\n\n  return PromisePool.withConcurrency(3)\n    .for(resourceNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await fs.ensureDir(baseAssetsPath);\n        await ipcRenderer.invoke('local-file-download', url, newPath);\n        resource.setFile(\n          path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n        );\n        fetchedResources.push({ resourceName });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetch.length);\n    })\n    .then(() => ({\n      fetchedResources,\n      erroredResources,\n    }));\n};\n\nexport const LocalResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","'use strict';\nconst promise_pool_1 = require(\"./promise-pool\");\nmodule.exports = promise_pool_1.PromisePool;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePool = void 0;\nconst promise_pool_executor_1 = require(\"./promise-pool-executor\");\nclass PromisePool {\n    /**\n     * Instantiates a new promise pool with a default `concurrency: 10` and `items: []`.\n     *\n     * @param {Object} options\n     */\n    constructor(items) {\n        this.concurrency = 10;\n        this.items = items !== null && items !== void 0 ? items : [];\n        this.errorHandler = undefined;\n    }\n    /**\n     * Set the number of tasks to process concurrently in the promise pool.\n     *\n     * @param {Integer} concurrency\n     *\n     * @returns {PromisePool}\n     */\n    withConcurrency(concurrency) {\n        this.concurrency = concurrency;\n        return this;\n    }\n    /**\n     * Set the number of tasks to process concurrently in the promise pool.\n     *\n     * @param {Number} concurrency\n     *\n     * @returns {PromisePool}\n     */\n    static withConcurrency(concurrency) {\n        return new this().withConcurrency(concurrency);\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePool}\n     */\n    for(items) {\n        return new PromisePool(items).withConcurrency(this.concurrency);\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePool}\n     */\n    static for(items) {\n        return new this().for(items);\n    }\n    /**\n     * Set the error handler function to execute when an error occurs.\n     *\n     * @param {Function} handler\n     *\n     * @returns {PromisePool}\n     */\n    handleError(handler) {\n        this.errorHandler = handler;\n        return this;\n    }\n    /**\n     * Starts processing the promise pool by iterating over the items\n     * and running each item through the async `callback` function.\n     *\n     * @param {Function} The async processing function receiving each item from the `items` array.\n     *\n     * @returns Promise<{ results, errors }>\n     */\n    async process(callback) {\n        return new promise_pool_executor_1.PromisePoolExecutor()\n            .withConcurrency(this.concurrency)\n            .withHandler(callback)\n            .handleError(this.errorHandler)\n            .for(this.items)\n            .start();\n    }\n}\nexports.PromisePool = PromisePool;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePoolExecutor = void 0;\nconst promise_pool_error_1 = require(\"./promise-pool-error\");\nclass PromisePoolExecutor {\n    /**\n     * Creates a new promise pool executer instance with a default concurrency of 10.\n     */\n    constructor() {\n        this.tasks = [];\n        this.items = [];\n        this.errors = [];\n        this.results = [];\n        this.concurrency = 10;\n        this.handler = () => { };\n        this.errorHandler = undefined;\n    }\n    /**\n     * Set the number of tasks to process concurrently the promise pool.\n     *\n     * @param {Integer} concurrency\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    withConcurrency(concurrency) {\n        this.concurrency = concurrency;\n        return this;\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    for(items) {\n        this.items = items;\n        return this;\n    }\n    /**\n     * Set the handler that is applied to each item.\n     *\n     * @param {Function} action\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    withHandler(action) {\n        this.handler = action;\n        return this;\n    }\n    /**\n     * Set the error handler function to execute when an error occurs.\n     *\n     * @param {Function} handler\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    handleError(handler) {\n        this.errorHandler = handler;\n        return this;\n    }\n    /**\n     * Determines whether the number of active tasks is greater or equal to the concurrency limit.\n     *\n     * @returns {Boolean}\n     */\n    hasReachedConcurrencyLimit() {\n        return this.activeCount() >= this.concurrency;\n    }\n    /**\n     * Returns the number of active tasks.\n     *\n     * @returns {Number}\n     */\n    activeCount() {\n        return this.tasks.length;\n    }\n    /**\n     * Start processing the promise pool.\n     *\n     * @returns {Array}\n     */\n    async start() {\n        this.validateInputs();\n        return await this.process();\n    }\n    /**\n     * Ensure valid inputs and throw otherwise.\n     *\n     * @throws\n     */\n    validateInputs() {\n        if (typeof this.handler !== 'function') {\n            throw new Error('The first parameter for the .process(fn) method must be a function');\n        }\n        if (!(typeof this.concurrency === 'number' && this.concurrency >= 1)) {\n            throw new TypeError(`\"concurrency\" must be a number, 1 or up. Received \"${this.concurrency}\" (${typeof this.concurrency})`);\n        }\n        if (!Array.isArray(this.items)) {\n            throw new TypeError(`\"items\" must be an array. Received ${typeof this.items}`);\n        }\n        if (this.errorHandler) {\n            if (typeof this.errorHandler !== 'function') {\n                throw new Error(`The error handler must be a function. Received ${typeof this.errorHandler}`);\n            }\n        }\n    }\n    /**\n     * Starts processing the promise pool by iterating over the items\n     * and running each item through the async `callback` function.\n     *\n     * @param {Function} callback\n     *\n     * @returns {Promise}\n     */\n    async process() {\n        for (const item of this.items) {\n            if (this.hasReachedConcurrencyLimit()) {\n                await this.processingSlot();\n            }\n            this.startProcessing(item);\n        }\n        return this.drained();\n    }\n    /**\n     * Creates a deferred promise and pushes the related callback to the pending\n     * queue. Returns the promise which is used to wait for the callback.\n     *\n     * @returns {Promise}\n     */\n    async processingSlot() {\n        return this.waitForTaskToFinish();\n    }\n    /**\n     * Wait for one of the active tasks to finish processing.\n     */\n    async waitForTaskToFinish() {\n        await Promise.race(this.tasks);\n    }\n    /**\n     * Create a processing function for the given `item`.\n     *\n     * @param {*} item\n     */\n    startProcessing(item) {\n        const task = this.createTaskFor(item)\n            .then(result => {\n            this.results.push(result);\n            this.tasks.splice(this.tasks.indexOf(task), 1);\n        })\n            .catch(error => {\n            this.tasks.splice(this.tasks.indexOf(task), 1);\n            if (this.errorHandler) {\n                return this.errorHandler(error, item);\n            }\n            this.errors.push(promise_pool_error_1.PromisePoolError.createFrom(error, item));\n        });\n        this.tasks.push(task);\n    }\n    /**\n     * Ensures a returned promise for the processing of the given `item`.\n     *\n     * @param item\n     *\n     * @returns {*}\n     */\n    async createTaskFor(item) {\n        return this.handler(item);\n    }\n    /**\n     * Wait for all active tasks to finish. Once all the tasks finished\n     * processing, returns an object containing the results and errors.\n     *\n     * @returns {Object}\n     */\n    async drained() {\n        await this.drainActiveTasks();\n        return {\n            results: this.results,\n            errors: this.errors\n        };\n    }\n    /**\n     * Wait for all of the active tasks to finish processing.\n     */\n    async drainActiveTasks() {\n        await Promise.all(this.tasks);\n    }\n}\nexports.PromisePoolExecutor = PromisePoolExecutor;\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePoolError = void 0;\nclass PromisePoolError extends Error {\n    /**\n     * Create a new instance for the given `message` and `item`.\n     *\n     * @param error  The original error\n     * @param item   The item causing the error\n     */\n    constructor(error, item) {\n        super();\n        this.item = item;\n        this.name = this.constructor.name;\n        this.message = this.messageFrom(error);\n        Error.captureStackTrace(this, this.constructor);\n    }\n    /**\n     * Returns a new promise pool error instance wrapping the `error` and `item`.\n     *\n     * @param {*} error\n     * @param {*} item\n     *\n     * @returns {PromisePoolError}\n     */\n    static createFrom(error, item) {\n        return new this(error, item);\n    }\n    /**\n     * Returns the error message from the given `error`.\n     *\n     * @param {*} error\n     *\n     * @returns {String}\n     */\n    messageFrom(error) {\n        if (error instanceof Error) {\n            return error.message;\n        }\n        if (typeof error === 'object') {\n            return error.message;\n        }\n        if (typeof error === 'string' || typeof error === 'number') {\n            return error.toString();\n        }\n        return '';\n    }\n}\nexports.PromisePoolError = PromisePoolError;\n","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","import optionalRequire from '../../Utils/OptionalRequire.js';\nimport { getUID } from '../../Utils/LocalUserInfo.js';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nexport default {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport RaisedButton from '../RaisedButton';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  type: 'export' | 'create-game',\n  value: string,\n  onChange: string => void,\n  defaultPath?: string,\n  fullWidth?: boolean,\n|};\n\ntype TitleAndMessage = {|\n  title: ?string,\n  message: ?string,\n|};\n\nexport default class LocalFolderPicker extends PureComponent<Props, {||}> {\n  _onChooseFolder = ({ title, message }: TitleAndMessage) => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    dialog\n      .showOpenDialog(browserWindow, {\n        title,\n        properties: ['openDirectory', 'createDirectory'],\n        message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return;\n        this.props.onChange(filePaths[0]);\n      });\n  };\n\n  _getTitleAndMessage = (i18n: I18nType): TitleAndMessage => {\n    const { type } = this.props;\n    if (type === 'export') {\n      return {\n        title: i18n._(t`Choose an export folder`),\n        message: i18n._(t`Choose where to export the game`),\n      };\n    } else if (type === 'create-game') {\n      return {\n        title: i18n._(t`Choose a folder for the new game`),\n        message: i18n._(t`Choose where to create the game`),\n      };\n    }\n\n    return {\n      title: undefined,\n      message: undefined,\n    };\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => {\n          const titleAndMessage = this._getTitleAndMessage(i18n);\n          return (\n            <div\n              style={{\n                ...styles.container,\n                width: this.props.fullWidth ? '100%' : undefined,\n              }}\n            >\n              <TextField\n                margin=\"dense\"\n                style={styles.textField}\n                type=\"text\"\n                hintText={titleAndMessage.title}\n                value={this.props.value}\n                onChange={(event, value) => this.props.onChange(value)}\n              />\n              <RaisedButton\n                label={<Trans>Choose folder</Trans>}\n                primary={false}\n                style={styles.button}\n                onClick={() => this._onChooseFolder(titleAndMessage)}\n              />\n            </div>\n          );\n        }}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire.js';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n}: {|\n  path: string,\n  outputFilename: string,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      console.log(\n        `Archive written at ${outputFilename}, ${archive.pointer()} total bytes.`\n      );\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter.js';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport * as React from 'react';\nimport { ExampleStore } from '../AssetStore/ExampleStore';\nimport { getExample } from '../Utils/GDevelopServices/Example';\nimport Divider from '@material-ui/core/Divider';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { type ExampleShortHeader } from '../Utils/GDevelopServices/Example';\nimport { Column, Line } from '../UI/Grid';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { writeAndCheckFile } from '../ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter';\nimport axios from 'axios';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  outputPath: string,\n|};\n\nexport const showGameFileCreationError = (\n  i18n: I18nType,\n  outputPath: string,\n  rawError: Error\n) => {\n  showErrorBox({\n    message: i18n._(\n      t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n    ),\n    rawError,\n    errorId: 'local-example-creation-error',\n  });\n};\n\nexport default function LocalExamples({\n  outputPath,\n  onChangeOutputPath,\n  onOpen,\n}: Props) {\n  const [isOpening, setIsOpening] = React.useState(false);\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <Column noMargin expand useFullHeight>\n          <Line>\n            <Column expand>\n              <LocalFolderPicker\n                fullWidth\n                value={outputPath}\n                onChange={onChangeOutputPath}\n                type=\"create-game\"\n              />\n            </Column>\n          </Line>\n          <Divider />\n          <ExampleStore\n            isOpening={isOpening}\n            onOpen={async (exampleShortHeader: ExampleShortHeader) => {\n              if (!fs || !outputPath) return;\n              try {\n                setIsOpening(true);\n                const example = await getExample(exampleShortHeader);\n\n                // Prepare the folder for the example.\n                fs.mkdirsSync(outputPath);\n\n                // Download the project file and save it.\n                const response = await axios.get(example.projectFileUrl, {\n                  responseType: 'text',\n                  // Required to properly get the response as text, and not as JSON:\n                  transformResponse: [data => data],\n                });\n                const projectFileContent = response.data;\n                const localFilePath = path.join(outputPath, 'game.json');\n\n                await writeAndCheckFile(projectFileContent, localFilePath);\n\n                // Open the project file. Note that resources that are URLs will be downloaded\n                // thanks to the LocalResourceFetcher.\n                onOpen(LocalFileStorageProvider, {\n                  fileIdentifier: localFilePath,\n                });\n\n                sendNewGameCreated(example.projectFileUrl);\n              } catch (error) {\n                showErrorBox({\n                  message:\n                    i18n._(t`Unable to load the example or save it on disk.`) +\n                    ' ' +\n                    i18n._(\n                      t`Verify your internet connection or try again later.`\n                    ),\n                  rawError: error,\n                  errorId: 'local-example-load-error',\n                });\n              } finally {\n                setIsOpening(false);\n              }\n            }}\n          />\n        </Column>\n      )}\n    </I18n>\n  );\n}\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = electron.remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport optionalRequire from './OptionalRequire.js';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n"],"sourceRoot":""}