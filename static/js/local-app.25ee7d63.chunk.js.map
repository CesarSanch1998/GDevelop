{"version":3,"sources":["ProjectCreation/LocalStarters.js","ProjectCreation/LocalExamplesFinder.js","ProjectCreation/LocalPathFinder.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","Export/LocalExporters/LocalFileSystem.js","UI/LocalFolderPicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","LocalApp.js","ProjectCreation/LocalExamples.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","Utils/LocalUserInfo.js"],"names":["path","optionalRequire","electron","app","remote","fs","gd","global","LocalStarters","i18n","exampleName","outputPath","this","props","findExamples","examplesPath","mkdirsSync","copySync","join","error","showGameFileCreationError","onOpen","LocalFileStorageProvider","fileIdentifier","sendNewGameCreated","project","ProjectHelper","createNewGDJSProject","filePath","setProjectFile","onCreate","onChangeOutputPath","findEmptyPath","getPath","noMargin","expand","fullWidth","value","onChange","type","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","createFromExample","createEmptyGame","alignItems","justifyContent","label","onShowExamples","Component","process","tryPath","onExists","onNoAccess","access","constants","R_OK","err","cb","appPath","getAppPath","cwd","basePath","folderName","generateName","name","accessSync","ex","dialog","displayName","kind","component","chooseResources","multiSelections","getLastUsedPath","setLastUsedPath","options","title","_","extensions","selectLocalResourcePath","then","resources","map","resourcePath","audioResource","AudioResource","projectPath","dirname","getProjectFile","setFile","relative","setName","imageResource","ImageResource","fontResource","FontResource","videoResource","VideoResource","jsonResource","JsonResource","bitmapFontResource","BitmapFontResource","Promise","reject","properties","push","latestPath","browserWindow","getCurrentWindow","showOpenDialog","filters","defaultPath","filePaths","length","lastUsedPath","parse","dir","filter","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","ipcRenderer","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resourceName","originalIndex","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","resourcesManager","getResourcesManager","forEach","resource","createOrUpdateResource","getResource","setMetadata","JSON","stringify","send","newFilePath","jfxr","BrowserWindow","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","devToolsOpen","previewBrowserWindowConfig","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","win","loadURL","setMenuBarVisibility","setAlwaysOnTop","webContents","setState","openDevTools","_openPreviewWindow","gamePath","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","nodeIntegration","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","console","info","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getServerAddress","setDebuggerServerAddress","address","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","time","LocalPreviewDebuggerServer","ref","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","React","LocalNetworkDialog","actions","key","primary","secondaryActions","cannotBeDismissed","onRequestClose","debuggerServerState","debuggerServerAddress","callbacksList","resolve","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","e","warn","serverStartTimeoutPromise","Error","race","getServerState","registerCallbacks","callbacks","callbacksIndex","getLocalExporters","renderIcon","helpPage","description","exportPipeline","localOnlineCordovaExportPipeline","localOnlineWebExportPipeline","localHTML5ExportPipeline","advanced","localFacebookInstantGamesExportPipeline","localCordovaExportPipeline","localOnlineElectronExportPipeline","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","renderHeader","updateExportState","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openItem","renderGameButton","archiveOutputFilename","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","styles","container","position","display","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","undefined","margin","hintText","PureComponent","os","onlineBuildType","targets","keystore","signingDialogOpen","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","launchOnlineBuild","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","buildElectron","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onSaveProject","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenStartPage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","fileMetadata","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","extensionModulePaths","all","extensionModulePath","extensionModule","rethrowException","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","getUID","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","content","writeFile","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","writeEventsFunctionsExtension","extension","filepath","object","ensureDir","stringifyException","writeJSONFile","serializeToJSObject","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","readFile","encoding","dataObject","readJSONFile","child_process","chokidar","findDevelopmentNewIdeAppPath","developmentElectronAppFolder","importGDJSRuntime","startTime","performance","now","exec","stdout","stderr","duration","toFixed","onWatchEvent","debounce","filename","eventName","resolvedFilename","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","watchPaths","watchPath","watcher","watch","awaitWriteFinish","ignoreInitial","totalTimeStr","close","getResourcesToFetch","getAllResourceNames","toJSArray","getFile","startsWith","fetchResources","a","onProgress","baseAssetsPath","downloadedFilePaths","Set","erroredResources","fetchedResources","fetchedResourcesCount","resourcesToFetch","PromisePool","withConcurrency","for","extname","filenameWithoutExtension","basename","newNameGenerator","tentativePath","existsSync","has","newPath","add","invoke","replace","LocalResourceFetcher","dirExists","emptyDirSync","fileNameFrom","fullPath","_isExternalUrl","_translateUrl","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","charAt","copyFile","source","dest","writeToFile","file","contents","outputFileSync","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","statSync","substr","LocalFolderPicker","_onChooseFolder","_getTitleAndMessage","titleAndMessage","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","log","pointer","pipe","directory","finalize","localFilePath","stepCurrentProgress","stepMaxProgress","onOpenWithPicker","unsplit","getReferencePartialObject","referencePath","isReferenceMagicPropertyName","maxUnsplitDepth","hasAutoSave","compareLastModified","autoSavePath","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","onAutoSaveProject","getOpenErrorMessage","create","authentification","setUpContextMenu","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","renderPreviewLauncher","renderExportDialog","exporters","renderCreateDialog","examplesComponent","LocalExamples","startersComponent","renderGDJSDevelopmentWatcher","resourceSources","localResourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","showErrorBox","errorId","isOpening","setIsOpening","useFullHeight","exampleShortHeader","getExample","example","axios","projectFileUrl","responseType","transformResponse","response","projectFileContent","writeAndCheckFile","split","pathSeparator","getArrayItemReferenceName","shouldSplit","partialObjects","createReference","reference","referenceTo","splitObject","currentObject","currentPath","currentReference","Array","isArray","index","itemPath","partialObject","itemReference","propertyName","propertyPath","propertyReference","unsplitObject","depth","keys","Object","indexOrPropertyName","isReference","splitPaths","paths","getSlugifiedUniqueNameFromProperty","existingNamesForReference","property","newName","checkFileContent","expectedContent","verificationTime","writeAndCheckFormattedJSONFile","writeProjectFiles","serializedProjectObject","isFolderProject","wasSaved","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","serializeToJSON","userInfo"],"mappings":"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","file":"static/js/local-app.25ee7d63.chunk.js","sourcesContent":["// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport RaisedButton from '../UI/RaisedButton';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport Text from '../UI/Text';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ListIcon from '../UI/ListIcon';\nimport { showGameFileCreationError } from './LocalExamples';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { findEmptyPath } from './LocalPathFinder';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nvar fs = optionalRequire('fs-extra');\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onShowExamples: () => void,\n  outputPath: string,\n|};\n\ntype State = {||};\n\nexport default class LocalStarters extends Component<Props, State> {\n  createFromExample(i18n: I18nType, exampleName: string) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  }\n\n  createEmptyGame(i18n: I18nType) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    try {\n      fs.mkdirsSync(outputPath);\n    } catch (error) {\n      showGameFileCreationError(i18n, outputPath, error);\n      return;\n    }\n\n    const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n    const filePath = path.join(outputPath, 'game.json');\n    project.setProjectFile(filePath);\n    this.props.onCreate(project, LocalFileStorageProvider, {\n      fileIdentifier: filePath,\n    });\n    sendNewGameCreated('');\n  }\n\n  componentDidMount() {\n    if (this.props.outputPath === '')\n      if (path && app)\n        this.props.onChangeOutputPath(\n          findEmptyPath(\n            path.join(app.getPath('documents'), 'GDevelop projects')\n          )\n        );\n  }\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose a game to use as a starter:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column expand noMargin>\n                <List>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/platformer.png\"\n                      />\n                    }\n                    primaryText={<Trans>Platformer</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A simple platform game, with coins to collect, moving\n                        platforms and enemies.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'platformer')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/space-shooter.png\"\n                      />\n                    }\n                    primaryText={<Trans>8-bit Space Shooter</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A beautiful, retro side-scrolling shooter where you must\n                        defeat incoming enemies with your mecha transforming\n                        spaceship. Huge boss included!\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'space-shooter')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/geometry-monster.png\"\n                      />\n                    }\n                    primaryText={<Trans>Geometry Monster</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A hyper casual endless game where you have to collect\n                        shapes and avoid bombs, with a progressively increasing\n                        difficulty.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'geometry-monster')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/isometric-game.png\"\n                      />\n                    }\n                    primaryText={<Trans>Isometric game</Trans>}\n                    secondaryText={\n                      <Trans>\n                        An example of an isometric game where you can explore a\n                        map with your character.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'isometric-game')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                      />\n                    }\n                    primaryText=\"Downhill Bike Racing\"\n                    secondaryText={\n                      <Trans>\n                        An example of a 2D physics based game, where players\n                        have to reach the end as fast as possible.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'downhill-bike-physics-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/pairs.png\"\n                      />\n                    }\n                    primaryText=\"Pairs\"\n                    secondaryText={\n                      <Trans>\n                        Find all matching pairs of cards in this relaxing game.\n                        Use tweens to create smooth, natural animations with a\n                        few events.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'pairs')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/new.png\"\n                      />\n                    }\n                    primaryText={<Trans>Empty game</Trans>}\n                    secondaryText={\n                      <Trans>Start a new game from scratch.</Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createEmptyGame(i18n)}\n                  />\n                  <Subheader>\n                    <Trans>Advanced</Trans>\n                  </Subheader>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/particle-effects-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Particle Effects Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo of various high quality particle effects (fire,\n                        magic, snow, rune spell...) that you can try and use in\n                        your game.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'particle-effects-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/game-feel-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Game Feel Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo showing how to enhance the \"game feel\" of your\n                        project: VFX, shot trail, ambient sounds and SFX,\n                        screenshake, wobble...\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'game-feel-demo')\n                    }\n                  />\n                </List>\n                <Line alignItems=\"center\" justifyContent=\"center\">\n                  <RaisedButton\n                    label={<Trans>See examples</Trans>}\n                    onClick={() => this.props.onShowExamples()}\n                  />\n                </Line>\n              </Column>\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst app = electron ? electron.remote.app : null;\nconst fs = optionalRequire('fs');\nconst process = optionalRequire('process');\n\nconst tryPath = (\n  path: string,\n  onExists: string => void,\n  onNoAccess: Function\n) =>\n  fs.access(path, fs.constants.R_OK, err => {\n    if (!err) onExists(path);\n    else onNoAccess();\n  });\n\nexport const findExamples = (cb: (?string) => void) => {\n  if (!process || !fs) return '';\n\n  const appPath = app ? app.getAppPath() : process.cwd();\n\n  // First try to find examples in app resources folder\n  tryPath(path.join(appPath, '..', 'examples'), cb, () => {\n    tryPath(\n      path.join(appPath, '..', '..', 'app', 'resources', 'examples'),\n      cb,\n      () => {\n        cb(null);\n      }\n    );\n  });\n};\n","import generateName from '../Utils/NewNameGenerator';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const findEmptyPath = basePath => {\n  if (!path) return basePath;\n\n  const folderName = generateName('My project', name => {\n    try {\n      fs.accessSync(path.join(basePath, name));\n    } catch (ex) {\n      return false;\n    }\n    return true;\n  });\n\n  return path.join(basePath, folderName);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport { Component } from 'react';\nimport {\n  isPathInProjectFolder,\n  copyAllToProjectFolder,\n} from './ResourceUtils.js';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport Window from '../Utils/Window';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nexport default [\n  {\n    name: 'localAudioFileOpener',\n    displayName: 'Choose a new audio file',\n    kind: 'audio',\n    component: class LocalAudioFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an audio file`),\n          name: i18n._(t`Audio files`),\n          extensions: ['aac', 'wav', 'mp3', 'ogg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'audio'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const audioResource = new gd.AudioResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            audioResource.setFile(path.relative(projectPath, resourcePath));\n            audioResource.setName(path.relative(projectPath, resourcePath));\n\n            return audioResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFileOpener',\n    displayName: 'Choose a new image',\n    kind: 'image',\n    component: class LocalFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an image`),\n          name: i18n._(t`Image files`),\n          extensions: ['png', 'jpg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'image'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const imageResource = new gd.ImageResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            imageResource.setFile(path.relative(projectPath, resourcePath));\n            imageResource.setName(path.relative(projectPath, resourcePath));\n\n            return imageResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFontFileOpener',\n    displayName: 'Choose a new font file',\n    kind: 'font',\n    component: class LocalFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a font file`),\n          name: i18n._(t`Font files`),\n          extensions: ['ttf', 'otf'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'font'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const fontResource = new gd.FontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            fontResource.setFile(path.relative(projectPath, resourcePath));\n            fontResource.setName(path.relative(projectPath, resourcePath));\n\n            return fontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localVideoFileOpener',\n    displayName: 'Choose a new video file',\n    kind: 'video',\n    component: class LocalVideoFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a video file`),\n          name: i18n._(t`Video files`),\n          extensions: ['mp4'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'video'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const videoResource = new gd.VideoResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            videoResource.setFile(path.relative(projectPath, resourcePath));\n            videoResource.setName(path.relative(projectPath, resourcePath));\n\n            return videoResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localJsonFileOpener',\n    displayName: 'Choose a new json file',\n    kind: 'json',\n    component: class LocalJsonFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a json file`),\n          name: i18n._(t`JSON file`),\n          extensions: ['json'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'json'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const jsonResource = new gd.JsonResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            jsonResource.setFile(path.relative(projectPath, resourcePath));\n            jsonResource.setName(path.relative(projectPath, resourcePath));\n\n            return jsonResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localBitmapFontFileOpener',\n    displayName: 'Choose a new bitmap font file (.fnt, .xml)',\n    kind: 'bitmapFont',\n    component: class LocalBitmapFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a bitmap font file`),\n          name: i18n._(t`FNT, XML file`),\n          extensions: ['fnt', 'xml'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'bitmapFont'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const bitmapFontResource = new gd.BitmapFontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            bitmapFontResource.setFile(\n              path.relative(projectPath, resourcePath)\n            );\n            bitmapFontResource.setName(\n              path.relative(projectPath, resourcePath)\n            );\n\n            return bitmapFontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n];\n\nconst selectLocalResourcePath = (\n  i18n: I18nType,\n  project: gdProject,\n  options: {\n    multiSelections: boolean,\n    title: string,\n    name: string,\n    extensions: Array<string>,\n  },\n  getLastUsedPath: (project: gdProject, kind: ResourceKind) => string,\n  setLastUsedPath: (\n    project: gdProject,\n    kind: ResourceKind,\n    path: string\n  ) => void,\n  kind: ResourceKind\n): Promise<Array<string>> => {\n  if (!dialog) return Promise.reject('Not supported');\n\n  const properties = ['openFile'];\n  if (options.multiSelections) properties.push('multiSelections');\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: options.title,\n      properties,\n      filters: [{ name: options.name, extensions: options.extensions }],\n      defaultPath: latestPath,\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return [];\n\n      const lastUsedPath = path.parse(filePaths[0]).dir;\n      setLastUsedPath(project, kind, lastUsedPath);\n\n      const outsideProjectFolderPaths = filePaths.filter(\n        path => !isPathInProjectFolder(project, path)\n      );\n\n      if (outsideProjectFolderPaths.length) {\n        const answer = Window.showConfirmDialog(\n          i18n._(\n            t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n          )\n        );\n\n        if (answer) {\n          return copyAllToProjectFolder(project, filePaths);\n        }\n      }\n\n      return filePaths;\n    });\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport { LocalPreviewDebuggerServer } from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst BrowserWindow = electron ? electron.remote.BrowserWindow : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  devToolsOpen: boolean,\n  previewBrowserWindowConfig: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    devToolsOpen: false,\n    previewBrowserWindowConfig: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    if (\n      !BrowserWindow ||\n      !this.state.previewBrowserWindowConfig ||\n      !this.state.previewGamePath\n    )\n      return;\n\n    const win = new BrowserWindow(this.state.previewBrowserWindowConfig);\n    win.loadURL(`file://${this.state.previewGamePath}/index.html`);\n    win.setMenuBarVisibility(this.state.hideMenuBar);\n    win.setAlwaysOnTop(this.state.alwaysOnTop);\n    win.webContents.on('devtools-opened', () => {\n      this.setState({ devToolsOpen: true });\n    });\n    win.webContents.on('devtools-closed', () => {\n      this.setState({ devToolsOpen: false });\n    });\n    if (this.state.devToolsOpen) win.openDevTools();\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowConfig: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            nodeIntegration: true,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = this.getPreviewDebuggerServer().getServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.setDebuggerServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return LocalPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const LocalPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getServerAddress: () => debuggerServerAddress,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport.js';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport.js';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getLocalExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'localonlinecordovaexport',\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'localonlinewebexport',\n    exportPipeline: localOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>Local folder</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'localexport',\n    exportPipeline: localHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'localfacebookinstantgames',\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually to\n        iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'localcordovaexport',\n    exportPipeline: localCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'localonlineelectronexport',\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'localelectronexport',\n    exportPipeline: localElectronExportPipeline,\n    advanced: true,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openItem(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  canLaunchBuild: () => true,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-start-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { label: i18n._(t`Undo`), role: 'undo' },\n      { label: i18n._(t`Redo`), role: 'redo' },\n      { type: 'separator' },\n      { label: i18n._(t`Cut`), role: 'cut' },\n      { label: i18n._(t`Copy`), role: 'copy' },\n      { label: i18n._(t`Paste`), role: 'paste' },\n      { label: i18n._(t`Paste and Match Style`), role: 'pasteandmatchstyle' },\n      { label: i18n._(t`Delete`), role: 'delete' },\n      { label: i18n._(t`Select All`), role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Start Page`),\n        onClickSendEvent: 'main-menu-open-start-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Developer Tools`), role: 'toggledevtools' },\n      { type: 'separator' },\n      { label: i18n._(t`Toggle Fullscreen`), role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop-app.com',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop-app.com',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/gdevelop',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop-app.com/contribute/',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-start-page', props.onOpenStartPage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { getUID } from '../../Utils/LocalUserInfo.js';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nimport debounce from 'lodash/debounce';\nconst electron = optionalRequire('electron');\nconst child_process = optionalRequire('child_process');\nconst process = optionalRequire('process');\nconst path = optionalRequire('path');\nconst chokidar = optionalRequire('chokidar');\n\n/**\n * Returns the folder corresponding to newIDE/app in **development**. Works\n * only when running in Electron.\n */\nconst findDevelopmentNewIdeAppPath = (): string => {\n  if (!electron) return '';\n\n  const developmentElectronAppFolder = process.cwd();\n  return path.join(developmentElectronAppFolder, '../app');\n};\n\n/**\n * Launch the newIDE script `import-GDJS-Runtime`.\n * Cleaning the GDJS output folder and copying sources are both\n * skipped to speed up the build.\n */\nconst importGDJSRuntime = (): Promise<void> => {\n  if (!child_process || !path) return Promise.reject(new Error('Unsupported'));\n\n  return new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    child_process.exec(\n      `node \"${path.join(\n        findDevelopmentNewIdeAppPath(),\n        'scripts/import-GDJS-Runtime.js'\n      )}\" --skip-clean --skip-sources`,\n      (error, stdout, stderr) => {\n        if (error) {\n          console.error(`GDJS Runtime update error:\\n${error}`);\n          reject(error);\n          return;\n        }\n\n        const duration = (performance.now() - startTime).toFixed(0);\n        console.info(`GDJS Runtime updated in ${duration}ms:\\n${stdout}`);\n\n        if (stderr) {\n          console.error(`GDJS Runtime update error:\\n${stderr}`);\n          reject(new Error('Error while updating GDJS Runtime'));\n          return;\n        }\n\n        resolve();\n      }\n    );\n  });\n};\n\n/**\n * Callback for fs.watch, so that  whenever a source file is changed,\n * it relaunchs automatically the script to import.\n */\nconst onWatchEvent = debounce((event: ?string, filename: ?string) => {\n  const eventName = event || 'unknown-event';\n  const resolvedFilename = filename || 'unknown-file';\n  console.info(\n    `GDJS/extensions watchers found a \"${eventName}\" in ${resolvedFilename}, updating GDJS Runtime...`\n  );\n  importGDJSRuntime().catch(() => {});\n}, 100 /* Avoid running the script too much in case multiple changes are fired at the same time. */);\n\nconst genericWatcherErrorMessage =\n  'Error in watcher for GDJS Runtime - manually call npm run `node import-GDJS-Runtime.js` in the newIDE/app/scripts folder if you make changes to GDJS. Error:';\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      const startTime = performance.now();\n      if (!chokidar) {\n        console.error(\n          \"Unable to use 'chokidar' from Node.js to watch changes in GDJS.\"\n        );\n        return;\n      }\n\n      const relativeWatchPaths = [\n        // Watch all files in GDJS Runtime:\n        '../../GDJS/Runtime/**/*',\n        // Watch only JS/TS source files in extensions:\n        '../../Extensions/**/*.ts',\n        '../../Extensions/**/*.js',\n      ];\n      const watchPaths = relativeWatchPaths.map(watchPath =>\n        path.join(findDevelopmentNewIdeAppPath(), watchPath)\n      );\n\n      // Reload extensions when the component is first mounted\n      importGDJSRuntime().catch(() => {});\n\n      const watcher = chokidar\n        .watch(watchPaths, {\n          awaitWriteFinish: true,\n          ignoreInitial: true,\n        })\n        .on('all', onWatchEvent)\n        .on('error', e => console.error(genericWatcherErrorMessage, e))\n        .on('ready', () => {\n          const totalTimeStr = (performance.now() - startTime).toFixed(2);\n          console.info(\n            `Watchers for GDJS Runtime/extensions installed in ${totalTimeStr}ms.`\n          );\n        });\n\n      return () => watcher.close();\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\nimport PromisePool from '@supercharge/promise-pool';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isExternalUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  const resourcesManager = project.getResourcesManager();\n\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  return allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isExternalUrl(resource.getFile());\n  });\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n  const resourcesManager = project.getResourcesManager();\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n  const fetchedResources = [];\n\n  let fetchedResourcesCount = 0;\n  const resourcesToFetch = getResourcesToFetch(project);\n\n  return PromisePool.withConcurrency(3)\n    .for(resourceNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await fs.ensureDir(baseAssetsPath);\n        await ipcRenderer.invoke('local-file-download', url, newPath);\n        resource.setFile(\n          path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n        );\n        fetchedResources.push({ resourceName });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetch.length);\n    })\n    .then(() => ({\n      fetchedResources,\n      erroredResources,\n    }));\n};\n\nexport const LocalResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","import optionalRequire from '../../Utils/OptionalRequire.js';\nimport { getUID } from '../../Utils/LocalUserInfo.js';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nexport default {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport RaisedButton from '../RaisedButton';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  type: 'export' | 'create-game',\n  value: string,\n  onChange: string => void,\n  defaultPath?: string,\n  fullWidth?: boolean,\n|};\n\ntype TitleAndMessage = {|\n  title: ?string,\n  message: ?string,\n|};\n\nexport default class LocalFolderPicker extends PureComponent<Props, {||}> {\n  _onChooseFolder = ({ title, message }: TitleAndMessage) => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    dialog\n      .showOpenDialog(browserWindow, {\n        title,\n        properties: ['openDirectory', 'createDirectory'],\n        message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return;\n        this.props.onChange(filePaths[0]);\n      });\n  };\n\n  _getTitleAndMessage = (i18n: I18nType): TitleAndMessage => {\n    const { type } = this.props;\n    if (type === 'export') {\n      return {\n        title: i18n._(t`Choose an export folder`),\n        message: i18n._(t`Choose where to export the game`),\n      };\n    } else if (type === 'create-game') {\n      return {\n        title: i18n._(t`Choose a folder for the new game`),\n        message: i18n._(t`Choose where to create the game`),\n      };\n    }\n\n    return {\n      title: undefined,\n      message: undefined,\n    };\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => {\n          const titleAndMessage = this._getTitleAndMessage(i18n);\n          return (\n            <div\n              style={{\n                ...styles.container,\n                width: this.props.fullWidth ? '100%' : undefined,\n              }}\n            >\n              <TextField\n                margin=\"dense\"\n                style={styles.textField}\n                type=\"text\"\n                hintText={titleAndMessage.title}\n                value={this.props.value}\n                onChange={(event, value) => this.props.onChange(value)}\n              />\n              <RaisedButton\n                label={<Trans>Choose folder</Trans>}\n                primary={false}\n                style={styles.button}\n                onClick={() => this._onChooseFolder(titleAndMessage)}\n              />\n            </div>\n          );\n        }}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire.js';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n}: {|\n  path: string,\n  outputFilename: string,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      console.log(\n        `Archive written at ${outputFilename}, ${archive.pointer()} total bytes.`\n      );\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter.js';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for Electron powered IDE.\nimport LocalExamples from './ProjectCreation/LocalExamples';\nimport LocalStarters from './ProjectCreation/LocalStarters';\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport { getLocalExporters } from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport { LocalResourceFetcher } from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n      resourceFetcher={LocalResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={\n            // Add Url provider\n            [LocalFileStorageProvider]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog {...props} exporters={getLocalExporters()} />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={LocalExamples}\n                  startersComponent={LocalStarters}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport * as React from 'react';\nimport { ExampleStore } from '../AssetStore/ExampleStore';\nimport { getExample } from '../Utils/GDevelopServices/Asset';\nimport Divider from '@material-ui/core/Divider';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { type ExampleShortHeader } from '../Utils/GDevelopServices/Asset';\nimport { Column, Line } from '../UI/Grid';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { writeAndCheckFile } from '../ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter';\nimport axios from 'axios';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  outputPath: string,\n|};\n\nexport const showGameFileCreationError = (\n  i18n: I18nType,\n  outputPath: string,\n  rawError: Error\n) => {\n  showErrorBox({\n    message: i18n._(\n      t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n    ),\n    rawError,\n    errorId: 'local-example-creation-error',\n  });\n};\n\nexport default function LocalExamples({\n  outputPath,\n  onChangeOutputPath,\n  onOpen,\n}: Props) {\n  const [isOpening, setIsOpening] = React.useState(false);\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <Column noMargin expand useFullHeight>\n          <Line>\n            <Column expand>\n              <LocalFolderPicker\n                fullWidth\n                value={outputPath}\n                onChange={onChangeOutputPath}\n                type=\"create-game\"\n              />\n            </Column>\n          </Line>\n          <Divider />\n          <ExampleStore\n            isOpening={isOpening}\n            onOpen={async (exampleShortHeader: ExampleShortHeader) => {\n              if (!fs || !outputPath) return;\n              try {\n                setIsOpening(true);\n                const example = await getExample(exampleShortHeader);\n\n                // Prepare the folder for the example.\n                fs.mkdirsSync(outputPath);\n\n                // Download the project file and save it.\n                const response = await axios.get(example.projectFileUrl, {\n                  responseType: 'text',\n                  // Required to properly get the response as text, and not as JSON:\n                  transformResponse: [data => data],\n                });\n                const projectFileContent = response.data;\n                const localFilePath = path.join(outputPath, 'game.json');\n\n                await writeAndCheckFile(projectFileContent, localFilePath);\n\n                // Open the project file. Note that resources that are URLs will be downloaded\n                // thanks to the LocalResourceFetcher.\n                onOpen(LocalFileStorageProvider, {\n                  fileIdentifier: localFilePath,\n                });\n\n                sendNewGameCreated(example.projectFileUrl);\n              } catch (error) {\n                showErrorBox({\n                  message:\n                    i18n._(t`Unable to load the example or save it on disk.`) +\n                    ' ' +\n                    i18n._(\n                      t`Verify your internet connection or try again later.`\n                    ),\n                  rawError: error,\n                  errorId: 'local-example-load-error',\n                });\n              } finally {\n                setIsOpening(false);\n              }\n            }}\n          />\n        </Column>\n      )}\n    </I18n>\n  );\n}\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = electron.remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport optionalRequire from './OptionalRequire.js';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n"],"sourceRoot":""}