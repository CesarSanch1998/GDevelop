{"version":3,"sources":["MainFrame/BrowserIntroDialog.js","ResourcesList/BrowserResourceSources.js","ResourcesList/BrowserResourceExternalEditors.js","EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter.js","ProjectsStorage/DownloadFileStorageProvider/DownloadSaveAsDialog.js","ProjectsStorage/DownloadFileStorageProvider/index.js","UI/CustomSvgIcons/Dropbox.js","ProjectsStorage/DropboxStorageProvider/index.js","UI/CustomSvgIcons/OneDrive.js","ProjectsStorage/OneDriveStorageProvider/index.js","ProjectsStorage/ResourceFetcher/BrowserResourceFetcher.js","BrowserApp.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewLinkDialog.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewErrorDialog.js","Export/BrowserExporters/BrowserS3FileSystem.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewDebuggerServer.js","Export/BrowserExporters/BrowserOnlineCordovaExport.js","Utils/Zip.js/index.js","Export/BrowserExporters/BrowserOnlineElectronExport.js","Export/BrowserExporters/BrowserOnlineWebExport.js","Export/BrowserExporters/BrowserHTML5Export.js","Export/BrowserExporters/BrowserCordovaExport.js","Export/BrowserExporters/BrowserElectronExport.js","Export/BrowserExporters/BrowserFacebookInstantGamesExport.js","JsExtensionsLoader/BrowserJsExtensionsLoader.js","ProjectsStorage/GoogleDriveStorageProvider/index.js","UI/CustomSvgIcons/GoogleDrive.js","ProjectCreation/services/BrowserCreation.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveFileOrFolderPicker.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveSaveAsDialog.js","GameEngineFinder/BrowserS3GDJSFinder.js","Export/BrowserExporters/BrowserFileSystem.js","Utils/BrowserArchiver.js","Export/BrowserExporters/index.js","Utils/BlobDownloadUrlHolder.js","Utils/GDevelopServices/Preview.js","Export/BrowserExporters/BrowserFileUploader.js","Export/BrowserExporters/BrowserS3PreviewLauncher/index.js","ProjectsStorage/UrlStorageProvider/index.js"],"names":["BetaIntroDialog","Window","openExternalURL","this","props","open","onClose","ResponsiveWindowMeasurer","windowWidth","Dialog","title","actions","FlatButton","key","label","primary","onClick","_onOpenWebsite","cannotBeDismissed","onRequestClose","Text","justifyContent","RaisedButton","Component","ResourceStoreChooser","options","onChooseResources","createNewResource","ResourceStore","onChoose","resource","chosenResourceUrl","url","newResource","setFile","setName","path","basename","setOrigin","resourceKind","UrlChooser","React","inputValue","setInputValue","error","setError","erroredUrls","setErroredUrls","hasErroredUrls","filter","Boolean","length","validateInputValue","useDebounce","a","urls","multiSelection","split","Promise","all","map","axios","get","timeout","validateStatus","status","responses","response","noMargin","expand","renderButton","style","renderTextField","SemiControlledTextField","floatingLabelText","value","onChange","multiline","rows","rowsMax","fullWidth","errorText","isErrored","index","join","AlertMessage","kind","browserResourceSources","allResourceKindsAndMetadata","name","displayName","displayTab","renderComponent","editors","edit","sendExternalEditorOpened","showMessageBox","makeBrowserS3EventsFunctionCodeWriter","onWriteFile","prefix","makeTimestampedId","getPathFor","codeNamespace","slugs","getIncludeFileFor","getBaseUrl","writeFunctionCode","functionCodeNamespace","code","includeFile","content","console","log","uploadObject","Key","Body","ContentType","writeBehaviorCode","behaviorCodeNamespace","DownloadSaveAsDialog","_download","JSON","stringify","serializeToJSObject","project","rawError","showErrorBox","message","errorId","uri","encodeURI","downloadLink","document","createElement","href","download","body","appendChild","click","removeChild","onDone","maxWidth","internalName","renderIcon","hiddenInOpenDialog","createOperations","setDialog","closeDialog","onSaveProjectAs","fileMetadata","resolve","wasSaved","memo","SvgIcon","d","apisLoaded","apisLoadingPromise","initializeApis","reject","Error","then","catch","disabled","Dropbox","doesInitialOpenRequireUserInteraction","onOpen","onOpenWithPicker","onSaveProject","OneDrive","BrowserResourceFetcher","getResourcesToFetch","fetchResources","resourceNames","onProgress","fetchedResources","erroredResources","create","authentication","setUpContextMenu","appArguments","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","i18n","ProjectStorageProviders","storageProviders","UrlStorageProvider","GoogleDriveStorageProvider","DropboxStorageProvider","OneDriveStorageProvider","DownloadFileStorageProvider","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","MainFrame","renderPreviewLauncher","ref","BrowserS3PreviewLauncher","renderExportDialog","ExportDialog","onChangeSubscription","automatedExporters","browserAutomatedExporters","manualExporters","browserManualExporters","onlineWebExporter","browserOnlineWebExporter","allExportersRequireOnline","renderCreateDialog","CreateProjectDialog","onCreateBlank","onCreateFromExampleShortHeader","introDialog","resourceSources","resourceExternalEditors","browserResourceExternalEditors","extensionsLoader","makeExtensionsLoader","objectsEditorService","ObjectsEditorService","objectsRenderingService","ObjectsRenderingService","filterExamples","isDev","BrowserPreviewLinkDialog","_makeOnOpen","openPreviewWindow","previewWindow","targetId","onPreviewWindowOpened","onApply","BrowserPreviewErrorDialog","gd","global","isURL","filename","startsWith","BrowserS3FileSystem","filesContent","bucketBaseUrl","_pendingUploadObjects","_allCopiedExternalUrls","Set","uploadPendingObjects","result","mkDir","dirExists","clearDir","getTempDir","fileNameFrom","fullpath","dirNameFrom","dirname","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","relative","charAt","copyFile","source","dest","add","warn","writeToFile","fullPath","contents","replace","fileExtension","extname","push","readFile","file","_indexedFilesContent","text","readDir","ext","toUpperCase","output","VectorString","forEach","upperCaseUrl","indexOf","push_back","fileExists","textFileDescriptor","filePath","debuggerServerState","callbacksList","nextDebuggerId","previewWindowAndTargetIds","getExistingDebuggerIds","Object","keys","Number","getDebuggerIdForPreviewWindow","id","windowClosedPollingIntervalId","setupWindowClosedPolling","setInterval","closed","info","onConnectionClosed","debuggerIds","clearInterval","browserPreviewDebuggerServer","startServer","window","addEventListener","event","origin","parsedMessage","parse","data","onHandleParsedMessage","onServerStateChanged","sendMessage","postMessage","getServerState","registerCallbacks","callbacks","callbacksIndex","splice","registerPreviewWindow","sameWindowExistingId","onConnectionOpened","getExistingTargetIdForDebuggerId","previewWindowAndTargetId","browserOnlineCordovaExportPipeline","onlineBuildType","limitedBuilds","packageNameWarningType","getInitialExportState","targets","keystore","signingDialogOpen","canLaunchBuild","exportState","errored","exportStep","isNavigationDisabled","includes","renderHeader","renderLaunchButtonLabel","prepareExporter","context","findGDJS","gdjsRoot","abstractFileSystem","BrowserFileSystem","textFiles","fileSystem","assignIn","AbstractFileSystemJS","exporter","Exporter","outputDir","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","delete","getAllTextFilesIn","urlFiles","getAllUrlFilesIn","launchResourcesDownload","downloadUrlsToBlobs","updateStepProgress","blobFiles","launchCompression","archiveFiles","basePath","launchUpload","blobFile","getBuildFileUploadOptions","uploadOptions","uploadBlobFile","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","uid","zipJsLoaded","zipJsLoadingPromise","initializeZipJs","zip","loadScript","PUBLIC_URL","workerScripts","deflater","inflater","browserOnlineElectronExportPipeline","buildElectron","browserOnlineWebExportPipeline","renderCustomStepsProgress","build","buildWeb","browserHTML5ExportPipeline","renderDoneFooter","compressionOutput","renderGameButton","blob","blobDownloadUrl","openBlobDownloadUrl","browserCordovaExportPipeline","browserElectronExportPipeline","browserFacebookInstantGamesExportPipeline","jsExtensions","extensionModule","require","objectsRenderingServiceModules","loadAllExtensions","_","registerEditorConfigurations","requirePath","registerModule","registerInstanceRenderers","extensionModulePath","loadExtension","JsPlatform","DEVELOPER_KEY","DISCOVERY_DOCS","SCOPE","gapi","load","callback","auth2LoadPromise","auth2","init","apiKey","clientId","discoveryDocs","scope","client","setApiKey","driveLoadPromise","onerror","isAuthenticated","authenticate","googleAuth","getAuthInstance","isSignedIn","currentUser","listen","authenticated","signIn","googleUser","getAuthResponse","patchJsonFile","fileId","fetch","method","headers","Headers","Authorization","access_token","res","showFilePicker","selectFolderEnabled","showUploadView","google","picker","pickerBuilder","PickerBuilder","addView","DocsView","setIncludeFolders","setSelectFolderEnabled","setOAuthToken","setDeveloperKey","setAppId","setCallback","Response","ACTION","Action","PICKED","doc","DOCUMENTS","Document","ID","NAME","parentId","PARENT_ID","TYPE","Type","LOCATION","MIME_TYPE","type","dispose","CANCEL","DocsUploadView","setVisible","pickerElements","getElementsByClassName","i","zIndex","getFileMetadataFromAppArguments","state","googleDriveState","ids","fileIdentifier","e","fileContent","ex","googleDriveFileOrFolder","serializeToJSON","onShowFilePicker","onCancel","onSave","selectedFileOrFolder","newFileName","drive","files","uploadType","parents","mimeType","fields","apiResponse","newFileId","getOpenErrorMessage","outputPath","projectName","sendNewGameCreated","ProjectHelper","createNewGDJSProject","storageProvider","exampleShortHeader","getExample","example","projectFileUrl","styles","container","position","display","alignItems","width","button","marginLeft","textField","flex","TextField","floatingLabelFixed","hintText","onOpenPicker","setSelectedFileOrFolder","setNewFileName","saving","setSaving","saveError","setSaveError","pickerError","setPickerError","dialogHidden","hideDialog","canSave","save","canCancel","LeftLoader","isLoading","GoogleDriveFileOrFolderPicker","filesToDownload","preview","web","cordova","electron","fileSet","getIDEVersion","relativeFilePath","ok","pathPosix","posix","_textFiles","_filesToDownload","pathPrefix","filePathOrURL","baseDirectoryOrURL","substring","upperCaseFilePath","normalizedFilePath","addSearchParameterToUrl","urlEncodedParameterName","urlEncodedValue","separator","eachCallback","array","done","callNextCallback","count","urlWithParameters","downloadedBlobs","zipJs","zippedFilesCount","totalFilesCount","createWriter","BlobWriter","zipWriter","BlobReader","TextReader","close","exportPipeline","html5Exporter","onlineCordovaExporter","onlineElectronExporter","facebookInstantGamesExporter","cordovaExporter","electronExporter","BlobDownloadUrlHolder","children","setBlobDownloadUrl","URL","revokeObjectURL","createObjectURL","params","getSignedUrl","contentType","signedUrl","put","GDevelopGamePreviews","baseUrl","maxContentLength","Infinity","onUploadProgress","progressEvent","total","loaded","nextPreviewWindowId","existingTargetId","getGameResolutionWidth","height","getGameResolutionHeight","left","screenX","innerWidth","top","screenY","innerHeight","canDoNetworkPreview","canDoHotReload","previewLinkDialog","_prepareExporter","browserS3FileSystem","setCodeOutputDirectory","launchPreview","previewOptions","layout","externalLayout","setState","getPreviewDebuggerServer","err","previewExportOptions","PreviewExportOptions","setLayoutName","getName","setExternalLayoutName","useWindowMessageDebuggerClient","lastDebuggerId","shouldHotReload","hotReload","setNonRuntimeScriptsCacheBurst","Date","now","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","isDeprecatedExampleSchemeURL","hiddenInSaveDialog","POSITIONAL_ARGUMENTS_KEY","argument","exampleName"],"mappings":"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","file":"static/js/browser-app.72084cb2.chunk.js","sourcesContent":["import { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport Dialog from '../UI/Dialog';\nimport Window from '../Utils/Window';\nimport FlatButton from '../UI/FlatButton';\nimport Text from '../UI/Text';\nimport { ResponsiveWindowMeasurer } from '../UI/Reponsive/ResponsiveWindowMeasurer';\nimport RaisedButton from '../UI/RaisedButton';\nimport { Line } from '../UI/Grid';\n\nexport default class BetaIntroDialog extends Component {\n  _onOpenWebsite() {\n    Window.openExternalURL('http://gdevelop-app.com');\n  }\n\n  render() {\n    const { open, onClose } = this.props;\n\n    return (\n      <ResponsiveWindowMeasurer>\n        {windowWidth => (\n          <Dialog\n            title={<Trans>Welcome to GDevelop</Trans>}\n            actions={[\n              <FlatButton\n                key=\"download\"\n                label={<Trans>Download GDevelop desktop app</Trans>}\n                primary={false}\n                onClick={this._onOpenWebsite}\n              />,\n              <FlatButton\n                label={<Trans>Close</Trans>}\n                primary={false}\n                onClick={onClose}\n                key=\"close\"\n              />,\n            ]}\n            cannotBeDismissed={false}\n            open={open}\n            onRequestClose={onClose}\n          >\n            <div>\n              <Text>\n                <Trans>\n                  This is a version of GDevelop 5 that you can try online.\n                </Trans>\n              </Text>\n              <Text>\n                Choose a <b>new project to create</b>, then edit the scene or\n                the events ruling the game. You can{' '}\n                <b>launch a preview of your game</b> at any time.\n              </Text>\n              <Text>\n                <Trans>\n                  Download the full version of GDevelop on your desktop computer\n                  to create your own game without limits!\n                </Trans>\n              </Text>\n              <Line justifyContent=\"center\">\n                <RaisedButton\n                  label={<Trans>Start using GDevelop</Trans>}\n                  primary\n                  onClick={onClose}\n                />\n              </Line>\n            </div>\n          </Dialog>\n        )}\n      </ResponsiveWindowMeasurer>\n    );\n  }\n}\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport path from 'path';\nimport { Line } from '../UI/Grid';\nimport { ColumnStackLayout, TextFieldWithButtonLayout } from '../UI/Layout';\nimport RaisedButton from '../UI/RaisedButton';\nimport SemiControlledTextField from '../UI/SemiControlledTextField';\nimport { useDebounce } from '../Utils/UseDebounce';\nimport axios from 'axios';\nimport AlertMessage from '../UI/AlertMessage';\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nexport const UrlChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  const [inputValue, setInputValue] = React.useState('');\n  const [error, setError] = React.useState<?Error>(null);\n  const [erroredUrls, setErroredUrls] = React.useState<boolean[]>([]);\n  const hasErroredUrls = erroredUrls.filter(Boolean).length;\n\n  const validateInputValue = useDebounce(async (inputValue: string) => {\n    const urls = options.multiSelection\n      ? inputValue.split('\\n').filter(Boolean)\n      : [inputValue];\n    setError(null);\n    setErroredUrls([]);\n\n    try {\n      const responses = await Promise.all(\n        urls.map(async url => {\n          return await axios.get(url, {\n            timeout: 1000,\n            validateStatus: status => true,\n          });\n        })\n      );\n\n      setErroredUrls(\n        responses.map(\n          response => !(response.status >= 200 && response.status < 400)\n        )\n      );\n    } catch (error) {\n      setError(error);\n    }\n  }, 500);\n\n  React.useEffect(\n    () => {\n      validateInputValue(inputValue);\n    },\n    [inputValue, validateInputValue]\n  );\n\n  return (\n    <ColumnStackLayout noMargin expand>\n      <Line noMargin>\n        <TextFieldWithButtonLayout\n          renderButton={style => (\n            <RaisedButton\n              onClick={() => {\n                const urls = options.multiSelection\n                  ? inputValue.split('\\n').filter(Boolean)\n                  : [inputValue];\n\n                onChooseResources(\n                  urls.map(url => {\n                    const newResource = createNewResource();\n                    newResource.setFile(url);\n                    newResource.setName(path.basename(url));\n                    newResource.setOrigin('url', url);\n\n                    return newResource;\n                  })\n                );\n              }}\n              primary\n              label={<Trans>Choose</Trans>}\n              style={style}\n            />\n          )}\n          renderTextField={() => (\n            <SemiControlledTextField\n              floatingLabelText={\n                options.multiSelection ? (\n                  <Trans>Resource(s) URL(s) (one per line)</Trans>\n                ) : (\n                  <Trans>Resource URL</Trans>\n                )\n              }\n              value={inputValue}\n              onChange={setInputValue}\n              multiline={options.multiSelection}\n              rows={1}\n              rowsMax={5}\n              fullWidth\n              errorText={\n                error ? (\n                  <Trans>\n                    There was an error verifying the URL(s). Please check they\n                    are correct.\n                  </Trans>\n                ) : hasErroredUrls ? (\n                  <Trans>\n                    Unable to verify URLs{' '}\n                    {erroredUrls\n                      .map((isErrored, index) => {\n                        if (isErrored) return '#' + (index + 1);\n                        return null;\n                      })\n                      .filter(Boolean)\n                      .join(', ')}\n                    . Please check they are correct.\n                  </Trans>\n                ) : null\n              }\n            />\n          )}\n        />\n      </Line>\n      <AlertMessage kind=\"warning\">\n        <Trans>\n          The URLs must be public and stay accessible while you work on this\n          project - they won't be stored inside the project file. When exporting\n          a game, the resources pointed by these URLs will be downloaded and\n          stored inside the game.\n        </Trans>\n      </AlertMessage>\n    </ColumnStackLayout>\n  );\n};\n\nconst browserResourceSources: Array<ResourceSource> = [\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `url-chooser-${kind}`,\n    displayName: t`Use an URL`,\n    displayTab: 'import',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <UrlChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n      />\n    ),\n  })),\n];\n\nexport default browserResourceSources;\n","// @flow\nimport Window from '../Utils/Window';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * when running in a browser.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: () => {\n      sendExternalEditorOpened('piskel');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'jfxr-app',\n    displayName: 'Edit with Jfxr',\n    kind: 'audio',\n    edit: () => {\n      sendExternalEditorOpened('jfxr');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'yarn-app',\n    displayName: 'Edit with Yarn',\n    kind: 'json',\n    edit: () => {\n      sendExternalEditorOpened('yarn');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport { uploadObject, getBaseUrl } from '../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../Utils/TimestampedId';\nimport slugs from 'slugs';\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to temporary S3 files.\n */\nexport const makeBrowserS3EventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  const prefix = makeTimestampedId();\n  const getPathFor = (codeNamespace: string) => {\n    return `${prefix}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) =>\n      getBaseUrl() + getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(functionCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading function generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(functionCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(behaviorCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading behavior generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(behaviorCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n  };\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport Window from '../../Utils/Window';\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport Text from '../../UI/Text';\n\ntype Props = {|\n  project: gdProject,\n  onDone: () => void,\n|};\n\nexport default class DownloadSaveAsDialog extends React.Component<Props> {\n  _download = () => {\n    let content = '';\n    try {\n      content = JSON.stringify(serializeToJSObject(this.props.project));\n    } catch (rawError) {\n      showErrorBox({\n        message: 'Unable to save your project',\n        rawError,\n        errorId: 'download-as-json-error',\n      });\n      return;\n    }\n    var uri = encodeURI('data:application/json;charset=utf-8,' + content);\n\n    var downloadLink = document.createElement('a');\n    downloadLink.href = uri;\n    downloadLink.download = 'game.json';\n\n    const { body } = document;\n    if (!body) return;\n\n    body.appendChild(downloadLink);\n    downloadLink.click();\n    body.removeChild(downloadLink);\n  };\n\n  render() {\n    const { onDone } = this.props;\n\n    const actions = [\n      <FlatButton\n        key=\"download\"\n        label={<Trans>Download GDevelop desktop version</Trans>}\n        primary={false}\n        onClick={() => Window.openExternalURL('http://gdevelop-app.com')}\n      />,\n      <FlatButton\n        key=\"close\"\n        label={<Trans>Close</Trans>}\n        primary={false}\n        onClick={onDone}\n      />,\n    ];\n\n    return (\n      <Dialog\n        actions={actions}\n        open\n        cannotBeDismissed={false}\n        onRequestClose={onDone}\n        maxWidth=\"sm\"\n      >\n        <Column noMargin>\n          <Line>\n            <Text>\n              <Trans>\n                You can download the file of your game to continue working on it\n                using the full GDevelop version:\n              </Trans>\n            </Text>\n          </Line>\n          <Line>\n            <Column expand>\n              <RaisedButton\n                label={<Trans>Download game file</Trans>}\n                fullWidth\n                primary\n                onClick={this._download}\n              />\n            </Column>\n          </Line>\n        </Column>\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport DownloadSaveAsDialog from './DownloadSaveAsDialog';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\n\n/**\n * \"Storage\" allowing to download a copy of the game.\n * Used for the web-app.\n */\nexport default ({\n  internalName: 'DownloadFile',\n  name: t`Download a copy`,\n  renderIcon: () => <SaveAlt />,\n  hiddenInOpenDialog: true,\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n      return new Promise(resolve => {\n        setDialog(() => (\n          <DownloadSaveAsDialog\n            onDone={() => {\n              closeDialog();\n              resolve({ wasSaved: false, fileMetadata });\n            }}\n            project={project}\n          />\n        ));\n      });\n    },\n  }),\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M12,14.56L16.35,18.16L18.2,16.95V18.3L12,22L5.82,18.3V16.95L7.68,18.16L12,14.56M7.68,2.5L12,6.09L16.32,2.5L22.5,6.5L18.23,9.94L22.5,13.36L16.32,17.39L12,13.78L7.68,17.39L1.5,13.36L5.77,9.94L1.5,6.5L7.68,2.5M12,13.68L18.13,9.94L12,6.19L5.87,9.94L12,13.68Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport Dropbox from '../../UI/CustomSvgIcons/Dropbox';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Dropbox APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Dropbox APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype DropboxUser = {};\n\n/**\n * Sign in the user to Dropbox, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<DropboxUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using Dropbox to open and store files.\n */\nexport default ({\n  internalName: 'Dropbox',\n  name: t`Dropbox (coming soon)`,\n  disabled: true,\n  renderIcon: () => <Dropbox />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M20.08,13.64C21.17,13.81 22,14.75 22,15.89C22,16.78 21.5,17.55 20.75,17.92L20.58,18H9.18L9.16,18V18C7.71,18 6.54,16.81 6.54,15.36C6.54,13.9 7.72,12.72 9.18,12.72L9.4,12.73L9.39,12.53A3.3,3.3 0 0,1 12.69,9.23C13.97,9.23 15.08,9.96 15.63,11C16.08,10.73 16.62,10.55 17.21,10.55A2.88,2.88 0 0,1 20.09,13.43L20.08,13.64M8.82,12.16C7.21,12.34 5.96,13.7 5.96,15.36C5.96,16.04 6.17,16.66 6.5,17.18H4.73A2.73,2.73 0 0,1 2,14.45C2,13 3.12,11.83 4.53,11.73L4.46,11.06C4.46,9.36 5.84,8 7.54,8C8.17,8 8.77,8.18 9.26,8.5C9.95,7.11 11.4,6.15 13.07,6.15C15.27,6.15 17.08,7.83 17.3,9.97H17.21C16.73,9.97 16.27,10.07 15.84,10.25C15.12,9.25 13.96,8.64 12.69,8.64C10.67,8.64 9,10.19 8.82,12.16Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport OneDrive from '../../UI/CustomSvgIcons/OneDrive';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load OneDrive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading OneDrive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype OneDriveUser = {};\n\n/**\n * Sign in the user to OneDrive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<OneDriveUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using OneDrive to open and store files.\n */\nexport default ({\n  internalName: 'OneDrive',\n  name: t`OneDrive (coming soon)`,\n  disabled: true,\n  renderIcon: () => <OneDrive />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","// @flow\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  // Currently, the web-app only supports resources with URLs.\n  // TODO: Detect non URLs resources and explain that it can be opened\n  // only on the desktop app.\n  return [];\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  return {\n    fetchedResources: [],\n    erroredResources: [],\n  };\n};\n\nexport const BrowserResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","// @flow\nimport * as React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for browser only IDE\nimport BrowserIntroDialog from './MainFrame/BrowserIntroDialog';\nimport browserResourceSources from './ResourcesList/BrowserResourceSources';\nimport browserResourceExternalEditors from './ResourcesList/BrowserResourceExternalEditors';\nimport BrowserS3PreviewLauncher from './Export/BrowserExporters/BrowserS3PreviewLauncher';\nimport {\n  browserAutomatedExporters,\n  browserManualExporters,\n  browserOnlineWebExporter,\n} from './Export/BrowserExporters';\nimport makeExtensionsLoader from './JsExtensionsLoader/BrowserJsExtensionsLoader';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport { makeBrowserS3EventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter';\nimport Providers from './MainFrame/Providers';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport GoogleDriveStorageProvider from './ProjectsStorage/GoogleDriveStorageProvider';\nimport DownloadFileStorageProvider from './ProjectsStorage/DownloadFileStorageProvider';\nimport DropboxStorageProvider from './ProjectsStorage/DropboxStorageProvider';\nimport OneDriveStorageProvider from './ProjectsStorage/OneDriveStorageProvider';\nimport { BrowserResourceFetcher } from './ProjectsStorage/ResourceFetcher/BrowserResourceFetcher';\nimport { onCreateFromExampleShortHeader, onCreateBlank } from './ProjectCreation/services/BrowserCreation';\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  let app = null;\n  const appArguments = Window.getArguments();\n\n  app = (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeBrowserS3EventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={null}\n      eventsFunctionsExtensionOpener={null}\n      resourceFetcher={BrowserResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            UrlStorageProvider,\n            GoogleDriveStorageProvider,\n            DropboxStorageProvider,\n            OneDriveStorageProvider,\n            DownloadFileStorageProvider,\n          ]}\n          defaultStorageProvider={UrlStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderPreviewLauncher={(props, ref) => (\n                <BrowserS3PreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={browserAutomatedExporters}\n                  manualExporters={browserManualExporters}\n                  onlineWebExporter={browserOnlineWebExporter}\n                  allExportersRequireOnline\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  onCreateBlank={onCreateBlank}\n                  onCreateFromExampleShortHeader={onCreateFromExampleShortHeader}\n                />\n              )}\n              introDialog={<BrowserIntroDialog />}\n              storageProviders={storageProviders}\n              onCreateFromExampleShortHeader={onCreateFromExampleShortHeader}\n              onCreateBlank={onCreateBlank}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={browserResourceSources}\n              resourceExternalEditors={browserResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !Window.isDev(),\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n\n  return app;\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { showErrorBox } from '../../../UI/Messages/MessageBox';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\nimport { openPreviewWindow } from '.';\n\ntype Props = {|\n  project: gdProject,\n  url: string,\n  onPreviewWindowOpened: any => void,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewLinkDialog extends Component<Props> {\n  _makeOnOpen = (i18n: I18nType) => () => {\n    const { previewWindow, targetId } = openPreviewWindow(\n      this.props.project,\n      this.props.url,\n      null // No existing target id: always open a new window.\n    );\n    if (!{ previewWindow, targetId }) {\n      showErrorBox({\n        message: i18n._(\n          t`Unable to open the preview! Be sure that popup are allowed for this website.`\n        ),\n        rawError: undefined,\n        errorId: 'preview-popup-disallowed',\n      });\n    } else {\n      this.props.onPreviewWindowOpened({ previewWindow, targetId });\n    }\n    this.props.onClose();\n  };\n\n  render() {\n    const { url } = this.props;\n    if (!url) return null;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"launch-preview\"\n                label={<Trans>Launch the preview</Trans>}\n                primary\n                onClick={this._makeOnOpen(i18n)}\n              />,\n            ]}\n            onApply={this._makeOnOpen(i18n)}\n            cannotBeDismissed={true}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Your preview is ready! Click on the button to launch the\n                    preview.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    To skip this dialog and{' '}\n                    <b>directly open the preview next time</b>, please allow\n                    popups to be opened for this website in your browser.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  error: Error,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewErrorDialog extends Component<Props> {\n  render() {\n    const { error, onClose } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"close\"\n                label={<Trans>Close</Trans>}\n                onClick={onClose}\n              />,\n            ]}\n            title={<Trans>Could not launch the preview</Trans>}\n            cannotBeDismissed={false}\n            onRequestClose={onClose}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  {// $FlowFixMe - AWS returned errors can have extra fields\n                  error.code === 'NetworkingError' ? (\n                    <Trans>\n                      The preview could not be launched because you're offline.\n                    </Trans>\n                  ) : (\n                    <Trans>\n                      The preview could not be launched because an error\n                      happened: {error.message}.\n                    </Trans>\n                  )}\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Make sure you're online, have a proper internet connection\n                    and try again. If you download and use GDevelop desktop\n                    application, you can also run previews without any internet\n                    connection.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport path from 'path';\nimport { uploadObject } from '../../Utils/GDevelopServices/Preview';\nconst gd: libGDevelop = global.gd;\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\ntype PendingUploadFileDescriptor = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\ntype ConstructorArgs = {|\n  filesContent: Array<TextFileDescriptor>,\n  prefix: string,\n  bucketBaseUrl: string,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop previews.\n */\nexport default class BrowserS3FileSystem {\n  prefix: string;\n  bucketBaseUrl: string;\n\n  // Store the content of some files.\n  _indexedFilesContent: { [string]: TextFileDescriptor };\n\n  // Store all the objects that should be written on the S3 bucket.\n  // Call uploadPendingObjects to send them\n  _pendingUploadObjects: Array<PendingUploadFileDescriptor> = [];\n\n  // Store a set of all external URLs copied so that we can simulate\n  // readDir result.\n  _allCopiedExternalUrls = new Set<string>();\n\n  constructor({ filesContent, prefix, bucketBaseUrl }: ConstructorArgs) {\n    this.prefix = prefix;\n    this.bucketBaseUrl = bucketBaseUrl;\n\n    this._indexedFilesContent = {};\n    filesContent.forEach(textFileDescriptor => {\n      this._indexedFilesContent[\n        textFileDescriptor.filePath\n      ] = textFileDescriptor;\n    });\n  }\n\n  uploadPendingObjects = () => {\n    return Promise.all(this._pendingUploadObjects.map(uploadObject)).then(\n      result => {\n        console.log('Uploaded all objects:', result);\n        this._pendingUploadObjects = [];\n      },\n      error => {\n        console.error(\"Can't upload all objects:\", error);\n        throw error;\n      }\n    );\n  };\n\n  mkDir = (path: string) => {\n    // Assume required directories always exist.\n  };\n  dirExists = (path: string) => {\n    // Assume required directories always exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Assume path is cleared.\n  };\n  getTempDir = () => {\n    return '/virtual-unused-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return fullpath;\n\n    return path.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return '';\n\n    return path.dirname(fullpath);\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path.resolve(baseDirectory, path.normalize(filename));\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path.relative(baseDirectory, path.normalize(filename));\n  };\n  isAbsolute = (fullpath: string) => {\n    if (isURL(fullpath)) return true;\n\n    if (fullpath.length === 0) return true;\n    return (\n      (fullpath.length > 0 && fullpath.charAt(0) === '/') ||\n      (fullpath.length > 1 && fullpath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    //URL are not copied.\n    if (isURL(source)) {\n      this._allCopiedExternalUrls.add(source);\n      return true;\n    }\n\n    console.warn('Copy not done from', source, 'to', dest);\n    return true;\n  };\n  writeToFile = (fullPath: string, contents: string) => {\n    const key = fullPath.replace(this.bucketBaseUrl, '');\n    const mime = {\n      '.js': 'text/javascript',\n      '.html': 'text/html',\n    };\n    const fileExtension = path.extname(fullPath);\n\n    // Defer real upload until it's triggered by calling\n    // uploadPendingObjects.\n    this._pendingUploadObjects.push({\n      Key: key,\n      Body: contents,\n      ContentType: mime[fileExtension],\n    });\n    return true;\n  };\n\n  readFile = (file: string) => {\n    if (!!this._indexedFilesContent[file])\n      return this._indexedFilesContent[file].text;\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    this._allCopiedExternalUrls.forEach(url => {\n      const upperCaseUrl = url.toUpperCase();\n      if (upperCaseUrl.indexOf(ext) === upperCaseUrl.length - ext.length) {\n        output.push_back(url);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filename: string) => {\n    if (isURL(filename)) return true;\n\n    // Assume all files asked for exists.\n    return true;\n  };\n}\n","// @flow\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n} from '../../PreviewLauncher.flow';\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\n\nlet nextDebuggerId = 0;\n\nconst previewWindowAndTargetIds: {\n  [DebuggerId]: { previewWindow: any, targetId: string },\n} = {};\n\nconst getExistingDebuggerIds = () =>\n  Object.keys(previewWindowAndTargetIds).map(key => Number(key));\n\nconst getDebuggerIdForPreviewWindow = (previewWindow: any) => {\n  for (const key in previewWindowAndTargetIds) {\n    const id = Number(key);\n    if (previewWindowAndTargetIds[id].previewWindow === previewWindow) {\n      return id;\n    }\n  }\n  return null;\n};\n\nlet windowClosedPollingIntervalId = null;\n\n/**\n * Listen to window closing so that we can notify the debuggers\n * when a preview window is closed.\n * Polling seems the only option to do so.\n */\nconst setupWindowClosedPolling = () => {\n  if (windowClosedPollingIntervalId !== null) return;\n\n  windowClosedPollingIntervalId = setInterval(() => {\n    for (const key in previewWindowAndTargetIds) {\n      const id = Number(key);\n      const { previewWindow } = previewWindowAndTargetIds[id];\n      if (previewWindow.closed) {\n        console.info('A preview window was closed, with debugger id:', id);\n        delete previewWindowAndTargetIds[id];\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds: getExistingDebuggerIds(),\n          })\n        );\n        if (!Object.keys(previewWindowAndTargetIds).length) {\n          clearInterval(windowClosedPollingIntervalId);\n          windowClosedPollingIntervalId = null;\n        }\n      }\n    }\n  }, 1000);\n};\n\nconst PREVIEWS_ORIGIN = 'https://game-previews.gdevelop-app.com';\n\n/**\n * A debugger server implemented using the ability to send/receive messages\n * from popup windows in the browser.\n */\nexport const browserPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: async () => {\n    if (debuggerServerState === 'started') return;\n    debuggerServerState = 'started';\n\n    window.addEventListener('message', event => {\n      if (event.origin !== PREVIEWS_ORIGIN) return;\n\n      const id = getDebuggerIdForPreviewWindow(event.source);\n      if (id === null) return; // Could not find the id of this preview window.\n\n      try {\n        const parsedMessage = JSON.parse(event.data);\n        callbacksList.forEach(({ onHandleParsedMessage }) =>\n          onHandleParsedMessage({ id, parsedMessage })\n        );\n      } catch (error) {\n        console.error(\n          'Error while parsing messages coming from a preview:',\n          error\n        );\n      }\n    });\n\n    setupWindowClosedPolling();\n\n    callbacksList.forEach(({ onServerStateChanged }) => onServerStateChanged());\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    const { previewWindow } = previewWindowAndTargetIds[id];\n    if (!previewWindow) return;\n\n    try {\n      previewWindow.postMessage(message, PREVIEWS_ORIGIN);\n    } catch (error) {\n      console.error('Unable to send a message to the preview window:', error);\n    }\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const registerPreviewWindow = ({\n  previewWindow,\n  targetId,\n}: {|\n  previewWindow: any,\n  targetId: string,\n|}) => {\n  const id = nextDebuggerId++;\n  const sameWindowExistingId = getDebuggerIdForPreviewWindow(previewWindow);\n  if (sameWindowExistingId !== null) {\n    // This window is already associated to a debugger id. This is surely\n    // because a new preview was launched in an existing window, replacing the old one.\n    // So we replace the existing debugger id.\n    delete previewWindowAndTargetIds[sameWindowExistingId];\n  }\n\n  previewWindowAndTargetIds[id] = { previewWindow, targetId };\n\n  setupWindowClosedPolling();\n\n  callbacksList.forEach(({ onConnectionOpened }) =>\n    onConnectionOpened({\n      id,\n      debuggerIds: getExistingDebuggerIds(),\n    })\n  );\n};\n\nexport const getExistingTargetIdForDebuggerId = (id: ?DebuggerId): ?string => {\n  if (id == null) return null;\n\n  const previewWindowAndTargetId = previewWindowAndTargetIds[id];\n  if (previewWindowAndTargetId) return previewWindowAndTargetId.targetId;\n\n  return null;\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId\n    );\n  },\n};\n","// @flow\nimport { loadScript } from '../LoadScript';\n\nconst PUBLIC_URL: string = process.env.PUBLIC_URL || '';\nconst ZIPJS_EXTERNAL_PATH = '/external/zip.js/WebContent';\nconst ZLIBASM_EXTERNAL_PATH = '/external/zlib-asm';\n\nlet zipJsLoaded = false;\nlet zipJsLoadingPromise: ?Promise<ZipJs> = null;\n\n/**\n * Initialize Zip.js, resolving with the instance of it.\n * Promise will be rejected if there is an error while loading Zip.js\n * (call initializeZipJs again to retry).\n */\nexport const initializeZipJs = (): Promise<ZipJs> => {\n  if (zipJsLoaded) {\n    const zip: ZipJs = global.zip;\n    return Promise.resolve(zip);\n  }\n\n  if (zipJsLoadingPromise) {\n    return zipJsLoadingPromise;\n  }\n\n  zipJsLoadingPromise = loadScript(\n    PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zip.js'\n  ).then(() => {\n    const zip: ?ZipJs = global.zip;\n    if (!zip) {\n      throw new Error(\n        'Can not find \"zip\" in the global namespace after loading zip.js. Has the zip.js script being loaded properly?'\n      );\n    }\n\n    zipJsLoadingPromise = null;\n    zipJsLoaded = true;\n\n    zip.workerScripts = {\n      deflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n      inflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n    };\n    return zip;\n  });\n\n  return zipJsLoadingPromise;\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  WebProjectLink,\n} from '../GenericExporters/OnlineWebExport';\nimport { type BuildStep } from '../Builds/BuildStepsProgress';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: (\n    build: ?Build,\n    errored: boolean,\n    exportStep: BuildStep\n  ) => (\n    <WebProjectLink build={build} errored={errored} exportStep={exportStep} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-html5',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-facebook-instant-games',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('facebook-instant-games').then(\n      ({ gdjsRoot, filesContent }) => {\n        console.info('GDJS found in ', gdjsRoot);\n\n        const outputDir = '/export/';\n        const abstractFileSystem = new BrowserFileSystem({\n          textFiles: filesContent,\n        });\n        // TODO: Memory leak? Check for other exporters too.\n        const fileSystem = assignIn(\n          new gd.AbstractFileSystemJS(),\n          abstractFileSystem\n        );\n        const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n        return {\n          exporter,\n          outputDir,\n          abstractFileSystem,\n        };\n      }\n    );\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                primary\n                onClick={() =>\n                  openBlobDownloadUrl(blobDownloadUrl, 'fb-instant-game.zip')\n                }\n                label={<Trans>Download the Instant Game archive</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport {\n  type JsExtensionsLoader,\n  type ExtensionLoadingResult,\n  type TranslationFunction,\n  loadExtension,\n} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\nconst gd: libGDevelop = global.gd;\n\n// The list of \"JsExtension.js\" files to be bundled in the webapp, keyed by their extension name.\nconst jsExtensions = [\n  {\n    name: 'AdMob',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdMob/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'AdvancedWindow',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdvancedWindow/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FacebookInstantGames',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FacebookInstantGames/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceSensors',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceSensors/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceVibration',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceVibration/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DebuggerTools',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DebuggerTools/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Physics2',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Physics2Behavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'ExampleJsExtension',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/ExampleJsExtension/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Tween',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TweenBehavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Video',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Video/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FileSystem',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FileSystem/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Firebase',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Firebase/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DialogueTree',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DialogueTree/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BBText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BBText/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-multistyle-text/dist/pixi-multistyle-text.umd': require('GDJS-for-web-app-only/Runtime/Extensions/BBText/pixi-multistyle-text/dist/pixi-multistyle-text.umd'),\n    },\n  },\n  {\n    name: 'TileMap',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap/dist/pixi-tilemap.umd': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap/dist/pixi-tilemap.umd'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap-helper': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap-helper'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pako/dist/pako.min': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pako/dist/pako.min'),\n    },\n  },\n  {\n    name: 'Effects',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Effects/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'P2P',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/P2P/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Lighting',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Lighting/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'SpatialSound',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/SpatialSound/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BitmapText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BitmapText/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Screenshot',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Screenshot/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n];\n\ntype MakeExtensionsLoaderArguments = {|\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n\n/**\n * Loader that load all JS extensions required in this file.\n * Extensions are usually auto-discovered when declared in Extensions/xxx/JsExtension.js, but not\n * for the web-app where everything must be bundled.\n */\nexport default function makeExtensionsLoader({\n  objectsEditorService,\n  objectsRenderingService,\n  filterExamples,\n}: MakeExtensionsLoaderArguments): JsExtensionsLoader {\n  return {\n    loadAllExtensions(\n      _: TranslationFunction\n    ): Promise<\n      Array<{ extensionModulePath: string, result: ExtensionLoadingResult }>\n    > {\n      return Promise.resolve(\n        jsExtensions\n          .filter(({ name }) => !filterExamples || !name.includes('Example'))\n          .map(({ name, extensionModule, objectsRenderingServiceModules }) => {\n            // Load any editor for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsEditorService &&\n              extensionModule.registerEditorConfigurations\n            ) {\n              extensionModule.registerEditorConfigurations(\n                objectsEditorService\n              );\n            }\n\n            // Register modules for ObjectsRenderingService\n            if (objectsRenderingService && objectsRenderingServiceModules) {\n              for (let requirePath in objectsRenderingServiceModules) {\n                objectsRenderingService.registerModule(\n                  requirePath,\n                  objectsRenderingServiceModules[requirePath]\n                );\n              }\n            }\n\n            // Load any renderer for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsRenderingService &&\n              extensionModule.registerInstanceRenderers\n            ) {\n              extensionModule.registerInstanceRenderers(\n                objectsRenderingService\n              );\n            }\n\n            return {\n              extensionModulePath: 'internal-extension://' + name,\n              result: loadExtension(\n                _,\n                gd,\n                gd.JsPlatform.get(),\n                extensionModule\n              ),\n            };\n          })\n      );\n    },\n  };\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport { serializeToJSON } from '../../Utils/Serializer';\nimport GoogleDrive from '../../UI/CustomSvgIcons/GoogleDrive';\nimport GoogleDriveSaveAsDialog from './GoogleDriveSaveAsDialog';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { type AppArguments } from '../../Utils/Window';\nimport { loadScript } from '../../Utils/LoadScript';\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst DEVELOPER_KEY = isDev\n  ? 'AIzaSyDH3UNpxzIpcTyd6aMCWI5oNFSptG_BhOc'\n  : 'AIzaSyDJYQmzLCfjXnNImDa1X_cDTWjl2BOrcM4';\nconst CLIENT_ID = isDev\n  ? '28563107180-bd29h9f3og4h1632m94nv6hat2igrej6.apps.googleusercontent.com'\n  : '44882707384-3t4tubr3fbht87sbtdp7u5mlo45k5uku.apps.googleusercontent.com';\nconst APP_ID = isDev ? '28563107180' : '44882707384'; // This is the first part of CLIENT_ID.\nconst DISCOVERY_DOCS = [\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n];\nconst SCOPE =\n  'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.install';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Google Drive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = loadScript('https://apis.google.com/js/api:client.js')\n    .then(() => {\n      const gapi = global.gapi;\n      if (!gapi) {\n        throw new Error(\n          'No gapi global object found after loading Google Drive API script'\n        );\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.load('client:auth2:picker', {\n          callback: () => {\n            const auth2LoadPromise = gapi.auth2.init({\n              apiKey: DEVELOPER_KEY,\n              clientId: CLIENT_ID,\n              discoveryDocs: DISCOVERY_DOCS,\n              scope: SCOPE,\n            });\n\n            gapi.client.setApiKey(DEVELOPER_KEY);\n            const driveLoadPromise = gapi.client.load('drive', 'v3');\n\n            resolve(Promise.all([auth2LoadPromise, driveLoadPromise]));\n          },\n          onerror: () => {\n            reject(\n              new Error(\n                'Unable to load auth2 and picker APIs for Google Drive.'\n              )\n            );\n          },\n        });\n      });\n    })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Google Drive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype GoogleUser = {\n  getAuthResponse: () => { access_token: string, error?: ?Error },\n};\n\nlet isAuthenticated = false;\n\n/**\n * Sign in the user to Google Drive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<GoogleUser> => {\n  return initializeApis().then(() => {\n    const gapi = global.gapi;\n    const googleAuth = gapi.auth2.getAuthInstance();\n    if (isAuthenticated && googleAuth.isSignedIn.get()) {\n      return googleAuth.currentUser.get();\n    }\n\n    isAuthenticated = false;\n    googleAuth.isSignedIn.listen(authenticated => {\n      console.info('Authenticated with Google APIs: ', authenticated);\n      isAuthenticated = authenticated;\n    });\n    return googleAuth\n      .signIn({ scope: SCOPE })\n      .then((googleUser: GoogleUser) => {\n        if (\n          !googleUser.getAuthResponse() ||\n          googleUser.getAuthResponse().error\n        ) {\n          console.error(\n            'OAuth2 error while sign in:',\n            googleUser.getAuthResponse()\n              ? googleUser.getAuthResponse().error\n              : 'No AuthResponse'\n          );\n          throw new Error('Authentication error');\n        }\n\n        isAuthenticated = true;\n        return googleUser;\n      });\n  });\n};\n\n/**\n * Update a JSON file, given its file id.\n */\nexport const patchJsonFile = (\n  fileId: string,\n  googleUser: GoogleUser,\n  content: string\n): Promise<void> => {\n  return fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}`, {\n    method: 'PATCH',\n    headers: new Headers({\n      Authorization: `Bearer ${googleUser.getAuthResponse().access_token}`,\n      'Content-Type': 'application/json',\n    }),\n    body: content,\n  }).then(res => {\n    if (res.status !== 200) {\n      if (res.status === 401) {\n        isAuthenticated = false;\n      }\n\n      throw res;\n    }\n  });\n};\n\n/**\n * Create a new empty JSON file, returning its fileid.\n */\nexport const createNewJsonFile = (\n  parentId: string,\n  name: string\n): Promise<string> => {\n  const gapi = global.gapi;\n\n  return gapi.client.drive.files\n    .create({\n      'content-type': 'application/json',\n      uploadType: 'multipart',\n      name: name,\n      parents: [parentId],\n      mimeType: 'application/json',\n      fields: 'id, name, kind, size',\n    })\n    .then(apiResponse => {\n      return apiResponse.result.id;\n    });\n};\n\n/**\n * Information about a file or folder picked by the user.\n */\nexport type GoogleDriveFileOrFolder =\n  | {|\n      type: 'FOLDER',\n      id: string,\n      name: string,\n    |}\n  | {|\n      type: 'FILE',\n      id: string,\n      name: string,\n      parentId: string,\n    |};\n\nexport type GoogleDriveFilePickerOptions = {|\n  selectFolderEnabled: boolean,\n  showUploadView: boolean,\n|};\n\n/**\n * Display a file picker as a modal, resolving with the selected file or folder,\n * if any.\n *\n * The picker dialog is not playing nice with material-ui dialogs or overlays. They should\n * not be displayed when the picker is on screen.\n */\nconst showFilePicker = ({\n  selectFolderEnabled,\n  showUploadView,\n}: GoogleDriveFilePickerOptions): Promise<?GoogleDriveFileOrFolder> => {\n  return authenticate().then(googleUser => {\n    const google = global.google;\n\n    return new Promise(resolve => {\n      let picker = null;\n      const pickerBuilder = new google.picker.PickerBuilder()\n        .addView(\n          new google.picker.DocsView()\n            .setIncludeFolders(true)\n            .setSelectFolderEnabled(selectFolderEnabled)\n        )\n        .setOAuthToken(googleUser.getAuthResponse().access_token)\n        .setDeveloperKey(DEVELOPER_KEY)\n        .setAppId(APP_ID) // App ID is required to correctly identify files created with the app.\n        .setCallback(data => {\n          if (\n            data[google.picker.Response.ACTION] === google.picker.Action.PICKED\n          ) {\n            const doc = data[google.picker.Response.DOCUMENTS][0];\n            const id: string = doc[google.picker.Document.ID];\n            const name: string = doc[google.picker.Document.NAME];\n            const parentId: string = doc[google.picker.Document.PARENT_ID];\n            if (\n              doc[google.picker.Document.TYPE] ===\n                google.picker.Type.LOCATION ||\n              doc[google.picker.Document.MIME_TYPE] ===\n                'application/vnd.google-apps.folder'\n            ) {\n              resolve({ id, name, type: 'FOLDER' });\n            } else {\n              resolve({ id, name, type: 'FILE', parentId });\n            }\n            if (picker) picker.dispose();\n          } else if (\n            data[google.picker.Response.ACTION] === google.picker.Action.CANCEL\n          ) {\n            resolve(null);\n            if (picker) picker.dispose();\n          }\n        });\n      if (showUploadView) {\n        pickerBuilder.addView(\n          new google.picker.DocsUploadView().setIncludeFolders(true)\n        );\n      }\n\n      picker = pickerBuilder.build();\n\n      picker.setVisible(true);\n      const pickerElements = document.getElementsByClassName('picker-dialog');\n      for (var i = 0; i < pickerElements.length; ++i) {\n        pickerElements[i].style.zIndex = '5000'; // Higher than Material UI modals\n      }\n    });\n  });\n};\n\n/**\n * A storage that is using Google Drive to open and store files.\n */\nexport default ({\n  internalName: 'GoogleDrive',\n  name: t`Google Drive`,\n  renderIcon: () => <GoogleDrive />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (appArguments.state) {\n      try {\n        // See \"state\" argument passed by Google Drive API:\n        // https://developers.google.com/drive/api/v3/enable-sdk#construct\n        const googleDriveState = JSON.parse(appArguments.state);\n        if (googleDriveState.ids && googleDriveState.ids[0]) {\n          return {\n            fileIdentifier: googleDriveState.ids[0],\n          };\n        }\n      } catch (e) {\n        console.warn(\n          \"Error while trying to parse the Google Drive 'ids' in 'state' from the app arguments.\"\n        );\n      }\n    }\n\n    return null;\n  },\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {\n      // Ignore error as we'll retry later.\n    });\n\n    return {\n      doesInitialOpenRequireUserInteraction: true, // Authentication will open a popup, requiring user interaction\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        return authenticate()\n          .then(googleUser =>\n            fetch(\n              `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,\n              {\n                method: 'GET',\n                headers: new Headers({\n                  Authorization: `Bearer ${\n                    googleUser.getAuthResponse().access_token\n                  }`,\n                }),\n              }\n            )\n          )\n          .then(\n            response => {\n              return response.text().then(\n                fileContent => {\n                  return new Promise((resolve, reject) => {\n                    try {\n                      const dataObject = JSON.parse(fileContent);\n                      return resolve({\n                        content: dataObject,\n                      });\n                    } catch (ex) {\n                      return reject(fileId + ' is a corrupted/malformed file.');\n                    }\n                  });\n                },\n                error => {\n                  console.error(\n                    'Error while reading the file from Google Drive API: ',\n                    error\n                  );\n                  throw error;\n                }\n              );\n            },\n            error => {\n              console.error(\n                'Error while fetching the file from Google Drive API: ',\n                error\n              );\n              throw error;\n            }\n          );\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return authenticate()\n          .then(googleUser =>\n            showFilePicker({ selectFolderEnabled: false, showUploadView: true })\n          )\n          .then(googleDriveFileOrFolder => {\n            if (!googleDriveFileOrFolder) {\n              return null;\n            }\n\n            return {\n              fileIdentifier: googleDriveFileOrFolder.id,\n            };\n          });\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        const content = serializeToJSON(project);\n        return authenticate()\n          .then(googleUser => patchJsonFile(fileId, googleUser, content))\n          .then(() => ({\n            wasSaved: true,\n            fileMetadata,\n          }));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return new Promise(resolve => {\n          setDialog(() => (\n            <GoogleDriveSaveAsDialog\n              onShowFilePicker={showFilePicker}\n              onCancel={() => {\n                closeDialog();\n                resolve({ wasSaved: false, fileMetadata });\n              }}\n              onSave={({ selectedFileOrFolder, newFileName }) => {\n                const content = serializeToJSON(project);\n\n                if (selectedFileOrFolder.type === 'FOLDER') {\n                  return authenticate().then(googleUser =>\n                    createNewJsonFile(\n                      selectedFileOrFolder.id,\n                      newFileName\n                    ).then(newFileId =>\n                      patchJsonFile(newFileId, googleUser, content).then(() => {\n                        closeDialog();\n                        resolve({\n                          wasSaved: true,\n                          fileMetadata: {\n                            fileIdentifier: newFileId,\n                          },\n                        });\n                      })\n                    )\n                  );\n                } else {\n                  return authenticate()\n                    .then(googleUser =>\n                      patchJsonFile(\n                        selectedFileOrFolder.id,\n                        googleUser,\n                        content\n                      )\n                    )\n                    .then(() => {\n                      closeDialog();\n                      resolve({\n                        wasSaved: true,\n                        fileMetadata: {\n                          fileIdentifier: selectedFileOrFolder.id,\n                        },\n                      });\n                    });\n                }\n              }}\n            />\n          ));\n        });\n      },\n      getOpenErrorMessage: (error: Error): MessageDescriptor => {\n        if (!apisLoaded) {\n          return t`Google Drive could not be loaded. Check that you are not offline and have a proper internet connection, then try again.`;\n        }\n\n        return t`Check that you don't have any blocked popup (if so, allow them and retry) and that you have the authorizations for reading the file you're trying to access.`;\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M7.71,3.5L1.15,15L4.58,21L11.13,9.5M9.73,15L6.3,21H19.42L22.85,15M22.28,14L15.42,2H8.58L8.57,2L15.43,14H22.28Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\n\nimport UrlStorageProvider from '../../ProjectsStorage/UrlStorageProvider';\nimport { getExample } from '../../Utils/GDevelopServices/Example';\nimport { sendNewGameCreated } from '../../Utils/Analytics/EventSender';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport {\n  type OnCreateBlankFunction,\n  type OnCreateFromExampleShortHeaderFunction,\n} from '../CreateProjectDialog';\n\nconst gd: libGDevelop = global.gd;\n\n// Signatures of this function and its arguments contain useless arguments\n// because this function has to match the signature of LocalCreation.onCreateBlank\n// that needs these arguments.\nexport const onCreateBlank: OnCreateBlankFunction = async ({\n  i18n,\n  outputPath,\n  projectName,\n}) => {\n  sendNewGameCreated('');\n\n  const project = gd.ProjectHelper.createNewGDJSProject();\n  return {\n    project,\n    projectName,\n    storageProvider: null,\n    fileMetadata: null,\n  };\n};\n\nexport const onCreateFromExampleShortHeader: OnCreateFromExampleShortHeaderFunction = async ({\n  i18n,\n  exampleShortHeader,\n  projectName,\n  outputPath,\n}) => {\n  try {\n    const example = await getExample(exampleShortHeader);\n    sendNewGameCreated(example.projectFileUrl);\n    return {\n      storageProvider: UrlStorageProvider,\n      projectName,\n      fileMetadata: {\n        fileIdentifier: example.projectFileUrl,\n      },\n    };\n  } catch (error) {\n    showErrorBox({\n      message:\n        i18n._(t`Unable to fetch the example.`) +\n        ' ' +\n        i18n._(t`Verify your internet connection or try again later.`),\n      rawError: error,\n      errorId: 'browser-example-load-error',\n    });\n    return;\n  }\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport TextField from '../../UI/TextField';\nimport { type GoogleDriveFileOrFolder } from '.';\n\ntype Props = {|\n  floatingLabelText: React.Node,\n  value: ?GoogleDriveFileOrFolder,\n  onOpenPicker: () => void,\n|};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n    width: '100%',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\nexport default (props: Props) => {\n  return (\n    <div\n      style={{\n        ...styles.container,\n      }}\n    >\n      <TextField\n        style={styles.textField}\n        floatingLabelText={props.floatingLabelText}\n        floatingLabelFixed\n        type=\"text\"\n        hintText={t`Choose a file or folder`}\n        value={props.value ? props.value.name : ''}\n        onChange={() => {}}\n      />\n      <RaisedButton\n        label={<Trans>Choose...</Trans>}\n        primary\n        style={styles.button}\n        onClick={props.onOpenPicker}\n      />\n    </div>\n  );\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport { Column, Line } from '../../UI/Grid';\nimport GoogleDriveFileOrFolderPicker from './GoogleDriveFileOrFolderPicker';\nimport {\n  type GoogleDriveFileOrFolder,\n  type GoogleDriveFilePickerOptions,\n} from '.';\nimport TextField from '../../UI/TextField';\nimport LeftLoader from '../../UI/LeftLoader';\nimport AlertMessage from '../../UI/AlertMessage';\n\ntype Props = {|\n  onCancel: () => void,\n  onSave: ({|\n    selectedFileOrFolder: GoogleDriveFileOrFolder,\n    newFileName: string,\n  |}) => Promise<void>,\n  onShowFilePicker: GoogleDriveFilePickerOptions => Promise<?GoogleDriveFileOrFolder>,\n|};\n\n/**\n * A \"Save as\" dialog for Google Drive, allowing to pick a file to overwrite or a folder\n * and a new filename where to save the game.\n */\nexport default (props: Props) => {\n  const [selectedFileOrFolder, setSelectedFileOrFolder] = React.useState(\n    (null: ?GoogleDriveFileOrFolder)\n  );\n  const [newFileName, setNewFileName] = React.useState('');\n  const [saving, setSaving] = React.useState(false);\n  const [saveError, setSaveError] = React.useState((null: ?Error));\n  const [pickerError, setPickerError] = React.useState((null: ?Error));\n  const [dialogHidden, hideDialog] = React.useState(false);\n\n  const canSave = () => {\n    if (saving) return;\n    if (!selectedFileOrFolder) return;\n\n    return selectedFileOrFolder.type === 'FOLDER' ? !!newFileName : true;\n  };\n  const save = () => {\n    if (!canSave() || !selectedFileOrFolder) return;\n\n    setSaveError(null);\n    setSaving(true);\n    props\n      .onSave({\n        selectedFileOrFolder,\n        newFileName,\n      })\n      .catch(error => {\n        setSaveError(error);\n        setSaving(false);\n      });\n  };\n  const canCancel = () => !saving;\n  const cancel = () => {\n    if (!canCancel()) return;\n\n    props.onCancel();\n  };\n  const openPicker = () => {\n    hideDialog(true);\n    setPickerError(null);\n    props\n      .onShowFilePicker({ selectFolderEnabled: true, showUploadView: false })\n      .then(selectedFileOrFolder => {\n        setSelectedFileOrFolder(selectedFileOrFolder);\n        hideDialog(false);\n      })\n      .catch(error => {\n        setPickerError(error);\n        hideDialog(false);\n      });\n  };\n\n  // Hide the dialog while the picker is opened, as it does not play nice with material-ui's\n  // Dialog.\n  if (dialogHidden) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      title={<Trans>Save on Google Drive</Trans>}\n      onApply={save}\n      actions={[\n        <FlatButton\n          key=\"cancel\"\n          label={<Trans>Cancel</Trans>}\n          primary={false}\n          disabled={!canCancel()}\n          onClick={props.onCancel}\n        />,\n        <LeftLoader key=\"save\" isLoading={saving}>\n          <FlatButton\n            label={<Trans>Save</Trans>}\n            primary\n            disabled={!canSave()}\n            onClick={save}\n          />\n        </LeftLoader>,\n      ]}\n      cannotBeDismissed={true}\n      open\n      onRequestClose={cancel}\n      maxWidth=\"sm\"\n    >\n      <Column noMargin>\n        <Line>\n          <GoogleDriveFileOrFolderPicker\n            floatingLabelText={\n              <Trans>Google Drive folder or existing file to overwrite</Trans>\n            }\n            value={selectedFileOrFolder}\n            onOpenPicker={openPicker}\n          />\n        </Line>\n        <Line>\n          {selectedFileOrFolder && selectedFileOrFolder.type === 'FOLDER' ? (\n            <TextField\n              floatingLabelText={<Trans>New file name</Trans>}\n              floatingLabelFixed\n              type=\"text\"\n              hintText={t`YourGame.json`}\n              value={newFileName}\n              onChange={(event, newFileName) => setNewFileName(newFileName)}\n              fullWidth\n            />\n          ) : null}\n        </Line>\n        {saveError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when saving your game. Verify that you have the\n              rights on the folder or file that you selected and try again.\n            </AlertMessage>\n          </Line>\n        )}\n        {pickerError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when selecting a file or folder from Google\n              Drive. Try again later or verify that you are properly connected\n              to Google Drive.\n            </AlertMessage>\n          </Line>\n        )}\n      </Column>\n    </Dialog>\n  );\n};\n","// @flow\nimport { getIDEVersion } from '../Version';\n\ntype FileSet =\n  | 'preview'\n  | 'cordova'\n  | 'electron'\n  | 'web'\n  | 'cocos2d-js'\n  | 'facebook-instant-games';\n\nconst filesToDownload: { [FileSet]: Array<string> } = {\n  preview: ['/Runtime/index.html'],\n  web: ['/Runtime/index.html'],\n  'cocos2d-js': [\n    '/Runtime/Cocos2d/cocos2d-js-v3.10.js',\n    '/Runtime/Cocos2d/index.html',\n    '/Runtime/Cocos2d/main.js',\n    '/Runtime/Cocos2d/project.json',\n  ],\n  'facebook-instant-games': [\n    '/Runtime/FacebookInstantGames/fbapp-config.json',\n    '/Runtime/FacebookInstantGames/index.html',\n  ],\n  cordova: [\n    '/Runtime/Cordova/www/index.html',\n    '/Runtime/Cordova/config.xml',\n    '/Runtime/Cordova/package.json',\n  ],\n  electron: [\n    '/Runtime/index.html',\n    '/Runtime/Electron/main.js',\n    '/Runtime/Electron/package.json',\n  ],\n};\n\nexport type TextFileDescriptor = {| text: string, filePath: string |};\n\nexport const findGDJS = (\n  fileSet: FileSet\n): Promise<{|\n  gdjsRoot: string,\n  filesContent: Array<TextFileDescriptor>,\n|}> => {\n  // Get GDJS for this version. If you updated the version,\n  // run `newIDE/web-app/scripts/deploy-GDJS-Runtime` script.\n  let gdjsRoot = `https://resources.gdevelop-app.com/GDJS-${getIDEVersion()}`;\n\n  // If you want to test your local changes to the game engine on the local web-app,\n  // run `npx serve -- --cors` (or another CORS enabled http server on port 5000)\n  // in `newIDE/app/resources/GDJS` and uncomment this line:\n  // gdjsRoot = `http://localhost:5000`;\n\n  return Promise.all(\n    filesToDownload[fileSet].map(relativeFilePath => {\n      const url = gdjsRoot + relativeFilePath;\n\n      // Don't do any caching, rely on the browser cache only.\n      return fetch(url).then(response => {\n        if (!response.ok) {\n          console.error(`Error while downloading \"${url}\"`, response);\n          throw new Error(\n            `Error while downloading \"${url}\" (status: ${response.status})`\n          );\n        }\n        return response.text().then(text => ({\n          filePath: url,\n          text,\n        }));\n      });\n    })\n  ).then(filesContent => {\n    return {\n      gdjsRoot,\n      filesContent,\n    };\n  });\n};\n","// @flow\nimport path from 'path';\nconst gd: libGDevelop = global.gd;\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\ntype ConstructorArgs = {|\n  textFiles: Array<TextFileDescriptor>,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\nconst pathPosix = path.posix || path;\n\n// TODO: Merge BrowserS3FileSystem into this? The way URLs are handled\n// is different though (BrowserS3FileSystem is not downloading anything\n// from URLs, while this file system does download files).\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop exports.\n */\nexport default class BrowserFileSystem {\n  // The representation of the \"file system\":\n\n  /**\n   * Store all the text files (filepath => content)\n   * @private\n   */\n  _textFiles: { [string]: string } = {};\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  /**\n   * Create a new in-memory file system.\n   */\n  constructor({ textFiles }: ConstructorArgs) {\n    textFiles.forEach(textFileDescriptor => {\n      this._textFiles[textFileDescriptor.filePath] = textFileDescriptor.text;\n    });\n  }\n\n  /**\n   * Returns all the in memory text files with the specified path prefix.\n   */\n  getAllTextFilesIn = (pathPrefix: string): Array<TextFileDescriptor> => {\n    return Object.keys(this._textFiles)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        text: this._textFiles[filePath],\n      }));\n  };\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  dirExists = (path: string) => {\n    // TODO: To be changed to be EnsureDirExists.\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Clear the files to be written in the specified directory.\n    const filePaths = Object.keys(this._textFiles);\n    filePaths.forEach(filePath => {\n      if (filePath.indexOf(path) === 0) {\n        delete this._textFiles[filePath];\n      }\n    });\n\n    return true;\n  };\n  getTempDir = () => {\n    return '/browser-file-system-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    return pathPosix.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    return pathPosix.dirname(fullpath);\n  };\n  makeAbsolute = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    // URLs are always absolute\n    if (isURL(filePathOrURL)) return filePathOrURL;\n\n    if (!this.isAbsolute(baseDirectoryOrURL))\n      baseDirectoryOrURL = pathPosix.resolve(baseDirectoryOrURL);\n\n    return pathPosix.resolve(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  makeRelative = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    if (isURL(filePathOrURL)) {\n      // Cutting the start if the URL is relative to the base URL\n      if (filePathOrURL.indexOf(baseDirectoryOrURL) === 0) {\n        return filePathOrURL.substring(baseDirectoryOrURL.length);\n      }\n\n      // Keep the URL \"absolute\" if on different domains.\n      console.warn(\n        `${filePathOrURL} cannot be made relative to ${baseDirectoryOrURL}, please double check this behavior is correct.`\n      );\n      return filePathOrURL;\n    }\n\n    // Paths are treated as usual paths.\n    return pathPosix.relative(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  isAbsolute = (fullpath: string) => {\n    // URLs are always absolute\n    if (isURL(fullpath)) return true;\n\n    // Paths are absolute if starting from the root\n    return fullpath.length > 0 && fullpath.charAt(0) === '/';\n  };\n\n  copyFile = (source: string, dest: string) => {\n    // URLs are not copied, but marked as to be downloaded.\n    if (isURL(source)) {\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    // If this is a file that we have already in memory,\n    // copy its path.\n    if (!!this._textFiles[source]) {\n      this._textFiles[pathPosix.normalize(dest)] = this._textFiles[source];\n      return true;\n    }\n\n    console.error(`File not found in copyFile (from ${source} to ${dest}).`);\n    return false;\n  };\n\n  writeToFile = (filePath: string, content: string) => {\n    this._textFiles[pathPosix.normalize(filePath)] = content;\n    return true;\n  };\n\n  readFile = (file: string): string => {\n    if (this._textFiles[file]) return this._textFiles[file];\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    Object.keys(this._filesToDownload).forEach(filePath => {\n      const upperCaseFilePath = filePath.toUpperCase();\n      if (\n        upperCaseFilePath.indexOf(ext) ===\n        upperCaseFilePath.length - ext.length\n      ) {\n        output.push_back(filePath);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filePath: string) => {\n    if (isURL(filePath)) return true;\n\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    return (\n      !!this._textFiles[normalizedFilePath] ||\n      !!this._filesToDownload[normalizedFilePath]\n    );\n  };\n}\n","// @flow\n\nimport { initializeZipJs } from './Zip.js';\nimport path from 'path';\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\nconst addSearchParameterToUrl = (\n  url: string,\n  urlEncodedParameterName: string,\n  urlEncodedValue: string\n) => {\n  if (url.startsWith('data:') || url.startsWith('blob:')) {\n    // blob/data protocol does not support search parameters, which are useless anyway.\n    return url;\n  }\n\n  const separator = url.indexOf('?') === -1 ? '?' : '&';\n  return url + separator + urlEncodedParameterName + '=' + urlEncodedValue;\n};\n\nfunction eachCallback<T>(\n  array: Array<T>,\n  callback: (T, () => void) => void,\n  done: () => void\n) {\n  if (!array.length) {\n    done();\n    return;\n  }\n  let index = 0;\n\n  const callNextCallback = () => {\n    callback(array[index], () => {\n      index++;\n      if (index >= array.length) {\n        done();\n      } else {\n        callNextCallback();\n      }\n    });\n  };\n\n  callNextCallback();\n}\n\nexport const downloadUrlsToBlobs = async ({\n  urlFiles,\n  onProgress,\n}: {|\n  urlFiles: Array<UrlFileDescriptor>,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Array<BlobFileDescriptor>> => {\n  let count = 0;\n  return Promise.all(\n    urlFiles\n      .filter(({ url }) => url.indexOf('.h') === -1) // TODO\n      .map(({ url, filePath }) => {\n        // To avoid strange/hard to understand CORS issues, we add a dummy parameter.\n        // By doing so, we force browser to consider this URL as different than the one traditionally\n        // used to render the resource in the editor (usually as an `<img>` or as a background image).\n        // If we don't add this distinct parameter, it can happen that browsers fail to load the image\n        // as it's already in the **browser cache** but with slightly different request parameters -\n        // making the CORS checks fail (even if it's coming from the browser cache).\n        //\n        // It's happening sometimes (according to loading order probably) in Chrome and (more often)\n        // in Safari. It might be linked to Amazon S3 + CloudFront that \"doesn't support the Vary: Origin header\".\n        // To be safe, we entirely avoid the issue with this parameter, making the browsers consider\n        // the resources for use in Pixi.js and for the rest of the editor as entirely separate.\n        //\n        // See:\n        // - https://stackoverflow.com/questions/26140487/cross-origin-amazon-s3-not-working-using-chrome\n        // - https://stackoverflow.com/questions/20253472/cors-problems-with-amazon-s3-on-the-latest-chomium-and-google-canary\n        // - https://stackoverflow.com/a/20299333\n        //\n        // Search for \"cors-cache-workaround\" in the codebase for the same workarounds.\n        const urlWithParameters = addSearchParameterToUrl(\n          url,\n          'gdUsage',\n          'export'\n        );\n\n        return fetch(urlWithParameters)\n          .then(\n            response => {\n              if (!response.ok) {\n                console.error(\n                  `Error while downloading \"${urlWithParameters}\"`,\n                  response\n                );\n                throw new Error(\n                  `Error while downloading \"${urlWithParameters}\" (status: ${\n                    response.status\n                  })`\n                );\n              }\n              return response.blob();\n            },\n            error => {\n              console.error(\n                `Error while downloading \"${urlWithParameters}\"`,\n                error\n              );\n              throw new Error(\n                `Error while downloading \"${urlWithParameters}\" (network error)`\n              );\n            }\n          )\n          .then(blob => {\n            count++;\n            onProgress(count, urlFiles.length);\n            return {\n              filePath,\n              blob,\n            };\n          });\n      })\n  ).then((downloadedBlobs: Array<BlobFileDescriptor>) => {\n    console.info('All downloads done');\n    return downloadedBlobs;\n  });\n};\n\n/**\n * Archive the specified blobs and texts into a zip file,\n * returned as a blob.\n */\nexport const archiveFiles = async ({\n  textFiles,\n  blobFiles,\n  basePath,\n  onProgress,\n}: {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n  basePath: string,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Blob> => {\n  const zipJs: ZipJs = await initializeZipJs();\n\n  let zippedFilesCount = 0;\n  let totalFilesCount = blobFiles.length + textFiles.length;\n\n  return new Promise((resolve, reject) => {\n    zipJs.createWriter(\n      new zipJs.BlobWriter('application/zip'),\n      function(zipWriter) {\n        eachCallback(\n          blobFiles,\n          ({ filePath, blob }, done) => {\n            // All files in a zip are relative\n            const relativeFilePath = path.relative(basePath, filePath);\n\n            zipWriter.add(\n              relativeFilePath,\n              new zipJs.BlobReader(blob),\n              () => {\n                zippedFilesCount++;\n                onProgress(zippedFilesCount, totalFilesCount);\n                done();\n              },\n              () => {\n                /* We don't track progress at the file level */\n              }\n            );\n          },\n          () => {\n            eachCallback(\n              textFiles,\n              ({ filePath, text }, done) => {\n                // All files in a zip are relative\n                const relativeFilePath = path.relative(basePath, filePath);\n\n                zipWriter.add(\n                  relativeFilePath,\n                  new zipJs.TextReader(text),\n                  () => {\n                    zippedFilesCount++;\n                    onProgress(zippedFilesCount, totalFilesCount);\n                    done();\n                  },\n                  () => {\n                    /* We don't track progress at the file level */\n                  }\n                );\n              },\n              () => {\n                zipWriter.close((blob: Blob) => {\n                  resolve(blob);\n                });\n              }\n            );\n          }\n        );\n      },\n      error => {\n        console.error('Error while making zip:', error);\n        reject(error);\n      }\n    );\n  });\n};\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { browserOnlineCordovaExportPipeline } from './BrowserOnlineCordovaExport.js';\nimport { browserOnlineElectronExportPipeline } from './BrowserOnlineElectronExport.js';\nimport { browserOnlineWebExportPipeline } from './BrowserOnlineWebExport';\nimport { browserHTML5ExportPipeline } from './BrowserHTML5Export';\nimport { browserCordovaExportPipeline } from './BrowserCordovaExport';\nimport { browserElectronExportPipeline } from './BrowserElectronExport';\nimport { browserFacebookInstantGamesExportPipeline } from './BrowserFacebookInstantGamesExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const browserOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: browserOnlineWebExportPipeline,\n};\n\nexport const browserAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: browserHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: browserOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: browserOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: browserFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const browserManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: browserHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: browserCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: browserElectronExportPipeline,\n  },\n];\n\n/**\n * Open an URL generated from a blob, to download it with the specified filename.\n */\nexport const openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n  blob: ?Blob,\n  children: (blobDownloadUrl: string) => React.Node,\n};\n\nexport const BlobDownloadUrlHolder = ({ blob, children }: Props) => {\n  const [blobDownloadUrl, setBlobDownloadUrl] = React.useState('');\n  React.useEffect(\n    () => {\n      // Release the existing blob URL, if any.\n      if (blobDownloadUrl) {\n        URL.revokeObjectURL(blobDownloadUrl);\n      }\n\n      if (blob) {\n        setBlobDownloadUrl(URL.createObjectURL(blob));\n      } else {\n        setBlobDownloadUrl('');\n      }\n\n      return () => {\n        // Release the blob URL if component is unmounted.\n        if (blobDownloadUrl) {\n          URL.revokeObjectURL(blobDownloadUrl);\n        }\n      };\n    },\n    [blob, blobDownloadUrl]\n  );\n\n  return children(blobDownloadUrl);\n};\n","// @flow\nimport axios from 'axios';\nimport { GDevelopGamePreviews } from './ApiConfigs';\nimport { getSignedUrl } from './Usage';\n\nexport type UploadedObject = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\nexport const uploadObject = (params: UploadedObject): Promise<any> => {\n  return getSignedUrl({\n    uploadType: 'preview',\n    key: params.Key,\n    contentType: params.ContentType,\n  }).then(({ signedUrl }) =>\n    axios.put(signedUrl, params.Body, {\n      headers: {\n        'Content-Type': params.ContentType,\n      },\n    })\n  );\n};\n\nexport const getBaseUrl = () => {\n  return GDevelopGamePreviews.baseUrl;\n};\n","// @flow\nimport axios from 'axios';\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadBlobFile = (\n  blob: Blob,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  return axios\n    .put(uploadOptions.signedUrl, blob, {\n      headers: {\n        'Content-Type': uploadOptions.contentType,\n      },\n      // Allow any arbitrary large file to be sent\n      maxContentLength: Infinity,\n      onUploadProgress: progressEvent => {\n        if (!progressEvent || !progressEvent.total) {\n          onProgress(0, 0);\n          return;\n        }\n\n        onProgress(progressEvent.loaded, progressEvent.total);\n      },\n    })\n    .then(() => undefined);\n};\n","// @flow\nimport * as React from 'react';\nimport BrowserPreviewLinkDialog from './BrowserPreviewLinkDialog';\nimport BrowserPreviewErrorDialog from './BrowserPreviewErrorDialog';\nimport BrowserS3FileSystem from '../BrowserS3FileSystem';\nimport { findGDJS } from '../../../GameEngineFinder/BrowserS3GDJSFinder';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport { getBaseUrl } from '../../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../../Utils/TimestampedId';\nimport {\n  browserPreviewDebuggerServer,\n  getExistingTargetIdForDebuggerId,\n  registerPreviewWindow,\n} from './BrowserPreviewDebuggerServer';\nconst gd: libGDevelop = global.gd;\n\ntype State = {|\n  previewLinkDialog: ?{\n    project: gdProject,\n    url: string,\n  },\n  error: ?Error,\n|};\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\nlet nextPreviewWindowId = 0;\n\n/**\n * This opens a preview window at the specified URL for the specified project.\n * This will be a new window if `existingTargetId` is null, or will replace an existing\n * window content if `existingTargetId` is specified.\n */\nexport const openPreviewWindow = (\n  project: gdProject,\n  url: string,\n  existingTargetId: ?string\n): {| previewWindow: any, targetId: string |} => {\n  const width = project.getGameResolutionWidth();\n  const height = project.getGameResolutionHeight();\n  const left = window.screenX + window.innerWidth / 2 - width / 2;\n  const top = window.screenY + window.innerHeight / 2 - height / 2;\n\n  const targetId = existingTargetId\n    ? // Reuse the existing target id if specified - which means the URL will\n      // replace the one in an existing preview window.\n      existingTargetId\n    : // Otherwise, create a new target id to open a new window.\n      'GDevelopPreview' + nextPreviewWindowId++;\n\n  const previewWindow = window.open(\n    url,\n    targetId,\n    `width=${width},height=${height},left=${left},top=${top}`\n  );\n\n  return { previewWindow, targetId };\n};\n\nexport default class BrowserS3PreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => false;\n  canDoHotReload = () => false;\n\n  state = {\n    previewLinkDialog: null,\n    error: null,\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS('preview').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const prefix = makeTimestampedId();\n\n      const outputDir = getBaseUrl() + prefix;\n      const browserS3FileSystem = new BrowserS3FileSystem({\n        filesContent,\n        bucketBaseUrl: getBaseUrl(),\n        prefix,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        browserS3FileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      exporter.setCodeOutputDirectory(outputDir);\n\n      return {\n        exporter,\n        outputDir,\n        browserS3FileSystem,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n    this.setState({\n      error: null,\n    });\n\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ exporter, outputDir, browserS3FileSystem }) => {\n        const previewExportOptions = new gd.PreviewExportOptions(\n          project,\n          outputDir\n        );\n        previewExportOptions.setLayoutName(layout.getName());\n        if (externalLayout) {\n          previewExportOptions.setExternalLayoutName(externalLayout.getName());\n        }\n\n        previewExportOptions.useWindowMessageDebuggerClient();\n\n        const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n        const lastDebuggerId = debuggerIds.length\n          ? debuggerIds[debuggerIds.length - 1]\n          : null;\n        const shouldHotReload =\n          previewOptions.hotReload && lastDebuggerId !== null;\n\n        // Scripts generated from extensions keep the same URL even after being modified.\n        // Use a cache bursting parameter to force the browser to reload them.\n        previewExportOptions.setNonRuntimeScriptsCacheBurst(Date.now());\n\n        previewExportOptions.setFullLoadingScreen(\n          previewOptions.fullLoadingScreen\n        );\n\n        exporter.exportProjectForPixiPreview(previewExportOptions);\n        previewExportOptions.delete();\n        exporter.delete();\n        return browserS3FileSystem.uploadPendingObjects().then(() => {\n          const url = outputDir + '/index.html';\n          const { previewWindow, targetId } = openPreviewWindow(\n            project,\n            url,\n            // We abuse the \"hot reload\" to choose if we open a new window or replace\n            // the content of an existing one. But hot reload is NOT implemented (yet -\n            // it would need to generate the preview in the same place and trigger a reload\n            // of the scripts).\n            shouldHotReload\n              ? getExistingTargetIdForDebuggerId(lastDebuggerId)\n              : null // Open a new window with a new target id.\n          );\n\n          if (!previewWindow) {\n            this.setState({\n              previewLinkDialog: {\n                project,\n                url,\n              },\n            });\n          } else {\n            registerPreviewWindow({\n              previewWindow,\n              targetId,\n            });\n          }\n        });\n      })\n      .catch((error: Error) => {\n        this.setState({\n          error,\n        });\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return browserPreviewDebuggerServer;\n  }\n\n  render() {\n    const { previewLinkDialog, error } = this.state;\n\n    if (error) {\n      return (\n        <BrowserPreviewErrorDialog\n          error={error}\n          onClose={() =>\n            this.setState({\n              error: null,\n            })\n          }\n        />\n      );\n    }\n\n    if (previewLinkDialog) {\n      return (\n        <BrowserPreviewLinkDialog\n          url={previewLinkDialog.url}\n          project={previewLinkDialog.project}\n          onPreviewWindowOpened={({ previewWindow, targetId }) => {\n            registerPreviewWindow({\n              previewWindow,\n              targetId,\n            });\n          }}\n          onClose={() =>\n            this.setState({\n              previewLinkDialog: null,\n            })\n          }\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport axios from 'axios';\nimport {\n  POSITIONAL_ARGUMENTS_KEY,\n  type AppArguments,\n} from '../../Utils/Window';\n\nconst isURL = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://') ||\n    filename.startsWith('blob:') ||\n    filename.startsWith('data:')\n  );\n};\n\nconst isDeprecatedExampleSchemeURL = (filename: string) => {\n  return filename.startsWith('example://');\n};\n\n/**\n * Storage allowing to download examples from an URL.\n * This is used for examples for the \"Example Store\".\n */\nexport default ({\n  internalName: 'UrlStorageProvider',\n  name: t`URL`,\n  hiddenInOpenDialog: true,\n  hiddenInSaveDialog: true,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    const argument = appArguments[POSITIONAL_ARGUMENTS_KEY][0];\n    if (!isURL(argument) && !isDeprecatedExampleSchemeURL(argument))\n      return null;\n\n    return {\n      fileIdentifier: argument,\n    };\n  },\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onOpen: async (fileMetadata: FileMetadata) => {\n      let url = fileMetadata.fileIdentifier;\n\n      // Backward compatibility with URL arguments that were like \"example://particle-effects-demo\".\n      if (isDeprecatedExampleSchemeURL(url)) {\n        const exampleName = url.replace('example://', '');\n        url = `https://resources.gdevelop-app.com/examples/${exampleName}/${exampleName}.json`;\n      }\n\n      const response = await axios.get(url);\n      if (!response.data)\n        throw new Error(\"Can't parse data from the URL (is it valid JSON?)\");\n\n      return {\n        content: response.data,\n      };\n    },\n  }),\n}: StorageProvider);\n"],"sourceRoot":""}