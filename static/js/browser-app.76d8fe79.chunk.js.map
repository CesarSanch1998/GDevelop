{"version":3,"sources":["ProjectCreation/BrowserStarters.js","ResourcesList/BrowserResourceSources.js","Export/BrowserExporters/BrowserS3PreviewLauncher/index.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewLinkDialog.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewErrorDialog.js","Export/BrowserExporters/BrowserS3FileSystem.js","Export/BrowserExporters/BrowserOnlineCordovaExport.js","Utils/Zip.js/index.js","Export/BrowserExporters/BrowserOnlineElectronExport.js","Export/BrowserExporters/BrowserOnlineWebExport.js","Export/BrowserExporters/BrowserHTML5Export.js","Export/BrowserExporters/BrowserCordovaExport.js","Export/BrowserExporters/BrowserElectronExport.js","Export/BrowserExporters/BrowserCocos2dExport.js","Export/BrowserExporters/BrowserFacebookInstantGamesExport.js","JsExtensionsLoader/BrowserJsExtensionsLoader.js","ProjectsStorage/GoogleDriveStorageProvider/index.js","UI/CustomSvgIcons/GoogleDrive.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveFileOrFolderPicker.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveSaveAsDialog.js","GameEngineFinder/BrowserS3GDJSFinder.js","Export/BrowserExporters/BrowserFileSystem.js","Utils/BrowserArchiver.js","Export/BrowserExporters/index.js","Utils/BlobDownloadUrlHolder.js","ProjectsStorage/UrlStorageProvider/index.js","Utils/GDevelopServices/Preview.js","Export/BrowserExporters/BrowserFileUploader.js","ProjectCreation/BrowserExamples.js","MainFrame/BrowserIntroDialog.js","ResourcesList/BrowserResourceExternalEditors.js","EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter.js","ProjectsStorage/DownloadFileStorageProvider/DownloadSaveAsDialog.js","ProjectsStorage/DownloadFileStorageProvider/index.js","UI/CustomSvgIcons/Dropbox.js","ProjectsStorage/DropboxStorageProvider/index.js","UI/CustomSvgIcons/OneDrive.js","ProjectsStorage/OneDriveStorageProvider/index.js","ProjectsStorage/ResourceFetcher/BrowserResourceFetcher.js","BrowserApp.js"],"names":["gd","global","BrowserStarters","noMargin","expand","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","sendNewGameCreated","props","onOpen","UrlStorageProvider","fileIdentifier","project","ProjectHelper","createNewGDJSProject","onCreate","alignItems","justifyContent","label","onShowExamples","Component","GenericResourcesChooser","state","open","resolveWithResources","chooseResources","Promise","resolve","setState","_onChoose","chosenResourceUrl","newResource","createNewResource","setFile","setName","path","basename","setOrigin","_onClose","this","title","actions","key","primary","cannotBeDismissed","onChoose","resource","url","resourceKind","React","name","displayName","kind","component","_chooser","AudioResource","ref","chooser","urlsAreImages","ImageResource","FontResource","VideoResource","JsonResource","BitmapFontResource","BrowserS3PreviewLauncher","canDoNetworkPreview","canDoHotReload","showPreviewLinkDialog","error","_openPreviewWindow","windowObjectReference","window","_prepareExporter","findGDJS","then","gdjsRoot","filesContent","console","info","prefix","makeTimestampedId","outputDir","getBaseUrl","browserS3FileSystem","BrowserS3FileSystem","bucketBaseUrl","fileSystem","assignIn","AbstractFileSystemJS","exporter","Exporter","setCodeOutputDirectory","launchPreview","previewOptions","layout","externalLayout","previewExportOptions","PreviewExportOptions","setLayoutName","getName","setExternalLayoutName","setNonRuntimeScriptsCacheBurst","Date","now","exportProjectForPixiPreview","delete","uploadPendingObjects","finalUrl","catch","onClose","BrowserPreviewLinkDialog","_makeOnOpen","i18n","showErrorBox","message","_","rawError","undefined","errorId","BrowserPreviewErrorDialog","onRequestClose","code","isURL","filename","substr","_pendingUploadObjects","_allCopiedExternalUrls","Set","all","map","uploadObject","result","log","mkDir","dirExists","clearDir","getTempDir","fileNameFrom","fullpath","dirNameFrom","dirname","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","relative","length","charAt","copyFile","source","dest","add","warn","writeToFile","fullPath","contents","replace","fileExtension","extname","push","Key","Body","ContentType","readFile","file","_indexedFilesContent","text","readDir","ext","toUpperCase","output","VectorString","forEach","upperCaseUrl","indexOf","push_back","fileExists","textFileDescriptor","filePath","browserOnlineCordovaExportPipeline","onlineBuildType","packageNameWarningType","getInitialExportState","targets","keystore","signingDialogOpen","canLaunchBuild","renderHeader","renderLaunchButtonLabel","prepareExporter","context","abstractFileSystem","BrowserFileSystem","textFiles","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","getAllTextFilesIn","urlFiles","getAllUrlFilesIn","launchResourcesDownload","downloadUrlsToBlobs","onProgress","updateStepProgress","blobFiles","launchCompression","archiveFiles","basePath","launchUpload","blobFile","getBuildFileUploadOptions","uploadOptions","uploadBlobFile","launchOnlineBuild","exportState","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","reject","Error","zipJsLoaded","zipJsLoadingPromise","initializeZipJs","zip","loadScript","PUBLIC_URL","workerScripts","deflater","inflater","browserOnlineElectronExportPipeline","buildElectron","browserOnlineWebExportPipeline","buildWeb","browserHTML5ExportPipeline","renderDoneFooter","compressionOutput","renderGameButton","blob","blobDownloadUrl","fullWidth","body","document","a","createElement","appendChild","style","display","href","download","click","removeChild","openBlobDownloadUrl","browserCordovaExportPipeline","browserElectronExportPipeline","browserCocos2dExportPipeline","debugMode","updateExportState","onToggle","e","check","prevState","toggled","labelPosition","exportWholeCocos2dProject","browserFacebookInstantGamesExportPipeline","jsExtensions","extensionModule","require","objectsRenderingServiceModules","makeExtensionsLoader","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","filter","includes","registerEditorConfigurations","requirePath","registerModule","registerInstanceRenderers","extensionModulePath","loadExtension","JsPlatform","get","DEVELOPER_KEY","DISCOVERY_DOCS","SCOPE","apisLoaded","apisLoadingPromise","initializeApis","gapi","load","callback","auth2LoadPromise","auth2","init","apiKey","clientId","discoveryDocs","scope","client","setApiKey","driveLoadPromise","onerror","isAuthenticated","authenticate","googleAuth","getAuthInstance","isSignedIn","currentUser","listen","authenticated","signIn","googleUser","getAuthResponse","patchJsonFile","fileId","content","fetch","method","headers","Headers","Authorization","access_token","res","status","showFilePicker","selectFolderEnabled","showUploadView","google","picker","pickerBuilder","PickerBuilder","addView","DocsView","setIncludeFolders","setSelectFolderEnabled","setOAuthToken","setDeveloperKey","setAppId","setCallback","data","Response","ACTION","Action","PICKED","doc","DOCUMENTS","id","Document","ID","NAME","parentId","PARENT_ID","TYPE","Type","LOCATION","MIME_TYPE","type","dispose","CANCEL","DocsUploadView","build","setVisible","pickerElements","getElementsByClassName","i","zIndex","internalName","renderIcon","getFileMetadataFromAppArguments","appArguments","googleDriveState","JSON","parse","ids","createOperations","setDialog","closeDialog","doesInitialOpenRequireUserInteraction","fileMetadata","response","fileContent","ex","onOpenWithPicker","googleDriveFileOrFolder","onSaveProject","serializeToJSON","wasSaved","onSaveProjectAs","onShowFilePicker","onCancel","onSave","selectedFileOrFolder","newFileName","drive","files","create","uploadType","parents","mimeType","fields","apiResponse","newFileId","getOpenErrorMessage","memo","d","styles","container","position","width","button","marginLeft","textField","flex","TextField","floatingLabelText","floatingLabelFixed","hintText","value","onChange","RaisedButton","onOpenPicker","setSelectedFileOrFolder","setNewFileName","saving","setSaving","saveError","setSaveError","pickerError","setPickerError","dialogHidden","hideDialog","canCancel","Dialog","FlatButton","disabled","LeftLoader","isLoading","canSave","maxWidth","GoogleDriveFileOrFolderPicker","event","AlertMessage","filesToDownload","preview","web","cordova","electron","fileSet","getIDEVersion","relativeFilePath","ok","pathPosix","posix","_textFiles","_filesToDownload","pathPrefix","Object","keys","filePathOrURL","baseDirectoryOrURL","substring","upperCaseFilePath","normalizedFilePath","addSearchParameterToUrl","urlEncodedParameterName","urlEncodedValue","separator","eachCallback","array","done","index","callNextCallback","count","urlWithParameters","downloadedBlobs","zipJs","zippedFilesCount","totalFilesCount","createWriter","BlobWriter","zipWriter","BlobReader","TextReader","close","getBrowserExporters","helpPage","description","exportPipeline","advanced","experimental","BlobDownloadUrlHolder","children","setBlobDownloadUrl","URL","revokeObjectURL","createObjectURL","isDeprecatedExampleSchemeURL","startsWith","hiddenInOpenDialog","hiddenInSaveDialog","POSITIONAL_ARGUMENTS_KEY","argument","exampleName","axios","params","getSignedUrl","contentType","signedUrl","put","GDevelopGamePreviews","baseUrl","maxContentLength","Infinity","onUploadProgress","progressEvent","total","loaded","BrowserExamples","isOpening","setIsOpening","ExampleStore","exampleShortHeader","getExample","example","projectFileUrl","BetaIntroDialog","Window","openExternalURL","ResponsiveWindowMeasurer","windowWidth","_onOpenWebsite","Text","editors","edit","sendExternalEditorOpened","showMessageBox","makeBrowserS3EventsFunctionCodeWriter","onWriteFile","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","includeFile","writeBehaviorCode","behaviorCodeNamespace","DownloadSaveAsDialog","_download","stringify","serializeToJSObject","uri","encodeURI","downloadLink","onDone","SvgIcon","Dropbox","OneDrive","BrowserResourceFetcher","getResourcesToFetch","fetchResources","resourceNames","fetchedResources","erroredResources","authentification","setUpContextMenu","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","ProjectStorageProviders","storageProviders","GoogleDriveStorageProvider","DropboxStorageProvider","OneDriveStorageProvider","DownloadFileStorageProvider","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","MainFrame","renderPreviewLauncher","renderExportDialog","ExportDialog","exporters","allExportersRequireOnline","renderCreateDialog","CreateProjectDialog","examplesComponent","startersComponent","introDialog","resourceSources","browserResourceSources","resourceExternalEditors","browserResourceExternalEditors","extensionsLoader","ObjectsEditorService","ObjectsRenderingService","isDev"],"mappings":"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","file":"static/js/browser-app.76d8fe79.chunk.js","sourcesContent":["// @flow\nimport { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport RaisedButton from '../UI/RaisedButton';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport ListIcon from '../UI/ListIcon';\nimport Text from '../UI/Text';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport UrlStorageProvider from '../ProjectsStorage/UrlStorageProvider';\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onShowExamples: () => void,\n|};\n\nexport default class BrowserStarters extends Component<Props> {\n  render() {\n    return (\n      <Column noMargin>\n        <Line>\n          <Column>\n            <Text>\n              <Trans>Choose a game to use as a starter:</Trans>\n            </Text>\n          </Column>\n        </Line>\n        <Line>\n          <Column expand noMargin>\n            <List>\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/platformer.png\"\n                  />\n                }\n                primaryText={<Trans>Platformer</Trans>}\n                secondaryText={\n                  <Trans>\n                    A simple platform game, with coins to collect, moving\n                    platforms and enemies.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('platformer');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/platformer/platformer.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/space-shooter.png\"\n                  />\n                }\n                primaryText={<Trans>8-bit Space Shooter</Trans>}\n                secondaryText={\n                  <Trans>\n                    A beautiful, retro side-scrolling shooter where you must\n                    defeat incoming enemies with your mecha transforming\n                    spaceship. Huge boss included!\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('space-shooter');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/space-shooter/space-shooter.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/geometry-monster.png\"\n                  />\n                }\n                primaryText={<Trans>Geometry Monster</Trans>}\n                secondaryText={\n                  <Trans>\n                    A hyper casual endless game where you have to collect shapes\n                    and avoid bombs, with a progressively increasing difficulty.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('geometry-monster');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/geometry-monster/geometry-monster.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/isometric-game.png\"\n                  />\n                }\n                primaryText={<Trans>Isometric game</Trans>}\n                secondaryText={\n                  <Trans>\n                    An example of an isometric game where you can explore a map\n                    with your character.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('isometric-game');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/isometric-game/isometric-game.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                  />\n                }\n                primaryText=\"Downhill Bike Racing\"\n                secondaryText={\n                  <Trans>\n                    An example of a 2D physics based game, where players have to\n                    reach the end as fast as possible.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('downhill-bike-physics-demo');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/downhill-bike-physics-demo/downhill-bike-physics-demo.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon iconSize={40} src=\"res/starters_icons/pairs.png\" />\n                }\n                primaryText=\"Pairs\"\n                secondaryText={\n                  <Trans>\n                    Find all matching pairs of cards in this relaxing game. Use\n                    tweens to create smooth, natural animations with a few\n                    events.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('pairs');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/pairs/pairs.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon iconSize={40} src=\"res/starters_icons/new.png\" />\n                }\n                primaryText={<Trans>Empty game</Trans>}\n                secondaryText={<Trans>Start a new game from scratch.</Trans>}\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('');\n\n                  const project = gd.ProjectHelper.createNewGDJSProject();\n                  this.props.onCreate(project, null, null);\n                }}\n              />\n              <Subheader>\n                <Trans>Advanced</Trans>\n              </Subheader>\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/particle-effects-demo.png\"\n                  />\n                }\n                primaryText={<Trans>Particle Effects Demo</Trans>}\n                secondaryText={\n                  <Trans>\n                    A demo of various high quality particle effects (fire,\n                    magic, snow, rune spell...) that you can try and use in your\n                    game.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('particle-effects-demo');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/particle-effects-demo/particle-effects-demo.json',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/game-feel-demo.png\"\n                  />\n                }\n                primaryText={<Trans>Game Feel Demo</Trans>}\n                secondaryText={\n                  <Trans>\n                    A demo showing how to enhance the \"game feel\" of your\n                    project: VFX, shot trail, ambient sounds and SFX,\n                    screenshake, wobble...\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('game-feel-demo');\n                  this.props.onOpen(UrlStorageProvider, {\n                    fileIdentifier:\n                      'https://resources.gdevelop-app.com/examples/game-feel-demo/game-feel-demo.json',\n                  });\n                }}\n              />\n            </List>\n            <Line alignItems=\"center\" justifyContent=\"center\">\n              <RaisedButton\n                label={<Trans>See examples</Trans>}\n                onClick={() => this.props.onShowExamples()}\n              />\n            </Line>\n          </Column>\n        </Line>\n      </Column>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport FlatButton from '../UI/FlatButton';\nimport Dialog from '../UI/Dialog';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport path from 'path';\nconst gd = global.gd;\n\ntype GenericResourcesChooserProps = {\n  createNewResource: () => gdResource,\n  title: React.Node,\n  resourceKind: ResourceKind,\n};\n\ntype GenericResourcesChooserState = {|\n  open: boolean,\n  resolveWithResources: ?(Array<any>) => void,\n|};\n\nclass GenericResourcesChooser extends React.Component<\n  GenericResourcesChooserProps,\n  GenericResourcesChooserState\n> {\n  state = {\n    open: false,\n    resolveWithResources: null,\n  };\n\n  chooseResources = (project, multiSelections = true): Promise<Array<any>> => {\n    return new Promise(resolve => {\n      this.setState({\n        open: true,\n        resolveWithResources: resolve,\n      });\n    });\n  };\n\n  _onChoose = (chosenResourceUrl: string) => {\n    const { resolveWithResources } = this.state;\n    if (!resolveWithResources) return;\n\n    const newResource = this.props.createNewResource();\n    newResource.setFile(chosenResourceUrl);\n    newResource.setName(path.basename(chosenResourceUrl));\n    newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n    resolveWithResources([newResource]);\n    this.setState({\n      open: false,\n      resolveWithResources: null,\n    });\n  };\n\n  _onClose = () => {\n    const { resolveWithResources } = this.state;\n    if (!resolveWithResources) return;\n\n    resolveWithResources([]);\n    this.setState({\n      open: false,\n      resolveWithResources: null,\n    });\n  };\n\n  render() {\n    // Avoid rendering the dialog if it's not opened.\n    if (!this.state.open) return null;\n\n    return (\n      <Dialog\n        title={this.props.title}\n        actions={[\n          <FlatButton\n            key=\"cancel\"\n            label={<Trans>Cancel</Trans>}\n            primary={false}\n            onClick={this._onClose}\n          />,\n        ]}\n        cannotBeDismissed={false}\n        open={this.state.open}\n        noMargin\n      >\n        <ResourceStore\n          onChoose={resource => {\n            this._onChoose(resource.url);\n          }}\n          resourceKind={this.props.resourceKind}\n        />\n      </Dialog>\n    );\n  }\n}\n\nexport default [\n  {\n    name: 'publicAudioUrlChooser',\n    displayName: 'Choose an audio file from library',\n    kind: 'audio',\n    component: class AudioResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"audio\"\n            createNewResource={() => new gd.AudioResource()}\n            title={<Trans>Choose an audio file from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicImageUrlChooser',\n    displayName: 'Choose an image from library',\n    kind: 'image',\n    component: class ImageResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"image\"\n            urlsAreImages\n            createNewResource={() => new gd.ImageResource()}\n            title={<Trans>Choose an image from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicFontUrlChooser',\n    displayName: 'Choose a font from library',\n    kind: 'font',\n    component: class FontResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"font\"\n            createNewResource={() => new gd.FontResource()}\n            title={<Trans>Choose a font from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicVideoUrlChooser',\n    displayName: 'Choose a video from library',\n    kind: 'video',\n    component: class VideoResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"video\"\n            createNewResource={() => new gd.VideoResource()}\n            title={<Trans>Choose a video from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicJsonUrlChooser',\n    displayName: 'Choose a json file from library',\n    kind: 'json',\n    component: class JsonResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"json\"\n            createNewResource={() => new gd.JsonResource()}\n            title={<Trans>Choose a Json File from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicBitmapFontUrlChooser',\n    displayName: 'Choose a bitmap font from library',\n    kind: 'bitmapFont',\n    component: class BitmapFontResourceChooser extends React.Component<ResourceSourceComponentProps> {\n      _chooser: ?GenericResourcesChooser;\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            urlsAreImages={false}\n            resourceKind=\"bitmapFont\"\n            createNewResource={() => new gd.BitmapFontResource()}\n            title={<Trans>Choose a bitmap font from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n];\n","// @flow\nimport * as React from 'react';\nimport BrowserPreviewLinkDialog from './BrowserPreviewLinkDialog';\nimport BrowserPreviewErrorDialog from './BrowserPreviewErrorDialog';\nimport BrowserS3FileSystem from '../BrowserS3FileSystem';\nimport { findGDJS } from '../../../GameEngineFinder/BrowserS3GDJSFinder';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport { getBaseUrl } from '../../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../../Utils/TimestampedId';\nconst gd: libGDevelop = global.gd;\n\ntype State = {|\n  showPreviewLinkDialog: boolean,\n  url: ?string,\n  error: ?Error,\n|};\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\nexport default class BrowserS3PreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => false;\n  canDoHotReload = () => false;\n\n  state = {\n    showPreviewLinkDialog: false,\n    url: null,\n    error: null,\n  };\n\n  _openPreviewWindow = (project: gdProject, url: string): any => {\n    const windowObjectReference = window.open(url, `_blank`);\n    return {\n      url,\n      windowObjectReference,\n    };\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS('preview').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const prefix = makeTimestampedId();\n\n      const outputDir = getBaseUrl() + prefix;\n      const browserS3FileSystem = new BrowserS3FileSystem({\n        filesContent,\n        bucketBaseUrl: getBaseUrl(),\n        prefix,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        browserS3FileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      exporter.setCodeOutputDirectory(outputDir);\n\n      return {\n        exporter,\n        outputDir,\n        browserS3FileSystem,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n    this.setState({\n      error: null,\n    });\n\n    return this._prepareExporter()\n      .then(({ exporter, outputDir, browserS3FileSystem }) => {\n        const previewExportOptions = new gd.PreviewExportOptions(\n          project,\n          outputDir\n        );\n        previewExportOptions.setLayoutName(layout.getName());\n        if (externalLayout) {\n          previewExportOptions.setExternalLayoutName(externalLayout.getName());\n        }\n\n        // Scripts generated from extensions keep the same URL even after being modified.\n        // Use a cache bursting parameter to force the browser to reload them.\n        previewExportOptions.setNonRuntimeScriptsCacheBurst(Date.now());\n\n        exporter.exportProjectForPixiPreview(previewExportOptions);\n        previewExportOptions.delete();\n        exporter.delete();\n        return browserS3FileSystem\n          .uploadPendingObjects()\n          .then(() => {\n            const finalUrl = outputDir + '/index.html';\n            return this._openPreviewWindow(project, finalUrl);\n          })\n          .then(({ url, windowObjectReference }) => {\n            if (!windowObjectReference) {\n              this.setState({\n                showPreviewLinkDialog: true,\n                url,\n              });\n            }\n          });\n      })\n      .catch((error: Error) => {\n        this.setState({\n          error,\n        });\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    // Debugger server is not supported in the web-app.\n    return null;\n  }\n\n  render() {\n    const { showPreviewLinkDialog, url, error } = this.state;\n\n    if (error) {\n      return (\n        <BrowserPreviewErrorDialog\n          error={error}\n          onClose={() =>\n            this.setState({\n              error: null,\n            })\n          }\n        />\n      );\n    }\n\n    if (showPreviewLinkDialog) {\n      return (\n        <BrowserPreviewLinkDialog\n          url={url}\n          onClose={() =>\n            this.setState({\n              showPreviewLinkDialog: false,\n            })\n          }\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { showErrorBox } from '../../../UI/Messages/MessageBox';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  url: ?string,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewLinkDialog extends Component<Props> {\n  _makeOnOpen = (i18n: I18nType) => () => {\n    const windowObjectReference = window.open(this.props.url, '_blank');\n    if (!windowObjectReference) {\n      showErrorBox({\n        message: i18n._(\n          t`Unable to open the preview! Be sure that popup are allowed for this website.`\n        ),\n        rawError: undefined,\n        errorId: 'preview-popup-disallowed',\n      });\n    }\n    this.props.onClose();\n  };\n\n  render() {\n    const { url } = this.props;\n    if (!url) return null;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"launch-preview\"\n                label={<Trans>Launch the preview</Trans>}\n                primary\n                onClick={this._makeOnOpen(i18n)}\n              />,\n            ]}\n            cannotBeDismissed={true}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Your preview is ready! Click on the button to launch the\n                    preview.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    To skip this dialog and{' '}\n                    <b>directly open the preview next time</b>, please allow\n                    popups to be opened for this website in your browser.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  error: Error,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewErrorDialog extends Component<Props> {\n  render() {\n    const { error, onClose } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"close\"\n                label={<Trans>Close</Trans>}\n                onClick={onClose}\n              />,\n            ]}\n            title={<Trans>Could not launch the preview</Trans>}\n            cannotBeDismissed={false}\n            onRequestClose={onClose}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  {// $FlowFixMe - AWS returned errors can have extra fields\n                  error.code === 'NetworkingError' ? (\n                    <Trans>\n                      The preview could not be launched because you're offline.\n                    </Trans>\n                  ) : (\n                    <Trans>\n                      The preview could not be launched because an error\n                      happened: {error.message}.\n                    </Trans>\n                  )}\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Make sure you're online, have a proper internet connection\n                    and try again. If you download and use GDevelop desktop\n                    application, you can also run previews without any internet\n                    connection.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport path from 'path';\nimport { uploadObject } from '../../Utils/GDevelopServices/Preview';\nconst gd: libGDevelop = global.gd;\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\ntype PendingUploadFileDescriptor = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\ntype ConstructorArgs = {|\n  filesContent: Array<TextFileDescriptor>,\n  prefix: string,\n  bucketBaseUrl: string,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.substr(0, 7) === 'http://' ||\n    filename.substr(0, 8) === 'https://' ||\n    filename.substr(0, 6) === 'ftp://'\n  );\n};\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop previews.\n */\nexport default class BrowserS3FileSystem {\n  prefix: string;\n  bucketBaseUrl: string;\n\n  // Store the content of some files.\n  _indexedFilesContent: { [string]: TextFileDescriptor };\n\n  // Store all the objects that should be written on the S3 bucket.\n  // Call uploadPendingObjects to send them\n  _pendingUploadObjects: Array<PendingUploadFileDescriptor> = [];\n\n  // Store a set of all external URLs copied so that we can simulate\n  // readDir result.\n  _allCopiedExternalUrls = new Set<string>();\n\n  constructor({ filesContent, prefix, bucketBaseUrl }: ConstructorArgs) {\n    this.prefix = prefix;\n    this.bucketBaseUrl = bucketBaseUrl;\n\n    this._indexedFilesContent = {};\n    filesContent.forEach(textFileDescriptor => {\n      this._indexedFilesContent[\n        textFileDescriptor.filePath\n      ] = textFileDescriptor;\n    });\n  }\n\n  uploadPendingObjects = () => {\n    return Promise.all(this._pendingUploadObjects.map(uploadObject)).then(\n      result => {\n        console.log('Uploaded all objects:', result);\n        this._pendingUploadObjects = [];\n      },\n      error => {\n        console.error(\"Can't upload all objects:\", error);\n        throw error;\n      }\n    );\n  };\n\n  mkDir = (path: string) => {\n    // Assume required directories always exist.\n  };\n  dirExists = (path: string) => {\n    // Assume required directories always exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Assume path is cleared.\n  };\n  getTempDir = () => {\n    return '/virtual-unused-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return fullpath;\n\n    return path.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return '';\n\n    return path.dirname(fullpath);\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path.resolve(baseDirectory, path.normalize(filename));\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path.relative(baseDirectory, path.normalize(filename));\n  };\n  isAbsolute = (fullpath: string) => {\n    if (isURL(fullpath)) return true;\n\n    if (fullpath.length === 0) return true;\n    return (\n      (fullpath.length > 0 && fullpath.charAt(0) === '/') ||\n      (fullpath.length > 1 && fullpath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    //URL are not copied.\n    if (isURL(source)) {\n      this._allCopiedExternalUrls.add(source);\n      return true;\n    }\n\n    console.warn('Copy not done from', source, 'to', dest);\n    return true;\n  };\n  writeToFile = (fullPath: string, contents: string) => {\n    const key = fullPath.replace(this.bucketBaseUrl, '');\n    const mime = {\n      '.js': 'text/javascript',\n      '.html': 'text/html',\n    };\n    const fileExtension = path.extname(fullPath);\n\n    // Defer real upload until it's triggered by calling\n    // uploadPendingObjects.\n    this._pendingUploadObjects.push({\n      Key: key,\n      Body: contents,\n      ContentType: mime[fileExtension],\n    });\n    return true;\n  };\n\n  readFile = (file: string) => {\n    if (!!this._indexedFilesContent[file])\n      return this._indexedFilesContent[file].text;\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    this._allCopiedExternalUrls.forEach(url => {\n      const upperCaseUrl = url.toUpperCase();\n      if (upperCaseUrl.indexOf(ext) === upperCaseUrl.length - ext.length) {\n        output.push_back(url);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filename: string) => {\n    if (isURL(filename)) return true;\n\n    // Assume all files asked for exists.\n    return true;\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  canLaunchBuild: () => true,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore\n    );\n  },\n};\n","// @flow\nimport { loadScript } from '../LoadScript';\n\nconst PUBLIC_URL: string = process.env.PUBLIC_URL || '';\nconst ZIPJS_EXTERNAL_PATH = '/external/zip.js/WebContent';\nconst ZLIBASM_EXTERNAL_PATH = '/external/zlib-asm';\n\nlet zipJsLoaded = false;\nlet zipJsLoadingPromise: ?Promise<ZipJs> = null;\n\n/**\n * Initialize Zip.js, resolving with the instance of it.\n * Promise will be rejected if there is an error while loading Zip.js\n * (call initializeZipJs again to retry).\n */\nexport const initializeZipJs = (): Promise<ZipJs> => {\n  if (zipJsLoaded) {\n    const zip: ZipJs = global.zip;\n    return Promise.resolve(zip);\n  }\n\n  if (zipJsLoadingPromise) {\n    return zipJsLoadingPromise;\n  }\n\n  zipJsLoadingPromise = loadScript(\n    PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zip.js'\n  ).then(() => {\n    const zip: ?ZipJs = global.zip;\n    if (!zip) {\n      throw new Error(\n        'Can not find \"zip\" in the global namespace after loading zip.js. Has the zip.js script being loaded properly?'\n      );\n    }\n\n    zipJsLoadingPromise = null;\n    zipJsLoaded = true;\n\n    zip.workerScripts = {\n      deflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n      inflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n    };\n    return zip;\n  });\n\n  return zipJsLoadingPromise;\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nconst openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n\nexport const browserHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-html5',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/Cocos2dExport';\nimport { openBlobDownloadUrl } from '.';\nimport { Column, Line } from '../../UI/Grid';\nimport Toggle from '../../UI/Toggle';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  debugMode: boolean,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCocos2dExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cocos2d',\n\n  getInitialExportState: () => ({\n    debugMode: false,\n  }),\n\n  canLaunchBuild: () => true,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <Toggle\n          onToggle={(e, check) =>\n            updateExportState(prevState => ({\n              ...prevState,\n              debugMode: check,\n            }))\n          }\n          toggled={exportState.debugMode}\n          labelPosition=\"right\"\n          label={\n            <Trans>\n              Debug mode (show FPS counter and stats in the bottom left)\n            </Trans>\n          }\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cocos2d-js').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    exporter.exportWholeCocos2dProject(\n      context.project,\n      context.exportState.debugMode,\n      outputDir\n    );\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-facebook-instant-games',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('facebook-instant-games').then(\n      ({ gdjsRoot, filesContent }) => {\n        console.info('GDJS found in ', gdjsRoot);\n\n        const outputDir = '/export/';\n        const abstractFileSystem = new BrowserFileSystem({\n          textFiles: filesContent,\n        });\n        // TODO: Memory leak? Check for other exporters too.\n        const fileSystem = assignIn(\n          new gd.AbstractFileSystemJS(),\n          abstractFileSystem\n        );\n        const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n        return {\n          exporter,\n          outputDir,\n          abstractFileSystem,\n        };\n      }\n    );\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                primary\n                onClick={() =>\n                  openBlobDownloadUrl(blobDownloadUrl, 'fb-instant-game.zip')\n                }\n                label={<Trans>Download the Instant Game archive</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport {\n  type JsExtensionsLoader,\n  type ExtensionLoadingResult,\n  type TranslationFunction,\n  loadExtension,\n} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\nconst gd: libGDevelop = global.gd;\n\n// The list of \"JsExtension.js\" files to be bundled in the webapp, keyed by their extension name.\nconst jsExtensions = [\n  {\n    name: 'AdMob',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdMob/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FacebookInstantGames',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FacebookInstantGames/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceSensors',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceSensors/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceVibration',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceVibration/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DebuggerTools',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DebuggerTools/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Physics2',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Physics2Behavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'ExampleJsExtension',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/ExampleJsExtension/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Tween',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TweenBehavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Video',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Video/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FileSystem',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FileSystem/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Firebase',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Firebase/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DialogueTree',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DialogueTree/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BBText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BBText/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-multistyle-text/dist/pixi-multistyle-text.umd': require('GDJS-for-web-app-only/Runtime/Extensions/BBText/pixi-multistyle-text/dist/pixi-multistyle-text.umd'),\n    },\n  },\n  {\n    name: 'TileMap',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap/dist/pixi-tilemap.umd': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap/dist/pixi-tilemap.umd'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap-helper': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap-helper'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pako/dist/pako.min': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pako/dist/pako.min'),\n    },\n  },\n  {\n    name: 'Effects',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Effects/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'P2P',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/P2P/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Lighting',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Lighting/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'SpatialSound',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/SpatialSound/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BitmapText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BitmapText/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n];\n\ntype MakeExtensionsLoaderArguments = {|\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n\n/**\n * Loader that load all JS extensions required in this file.\n * Extensions are usually auto-discovered when declared in Extensions/xxx/JsExtension.js, but not\n * for the web-app where everything must be bundled.\n */\nexport default function makeExtensionsLoader({\n  objectsEditorService,\n  objectsRenderingService,\n  filterExamples,\n}: MakeExtensionsLoaderArguments): JsExtensionsLoader {\n  return {\n    loadAllExtensions(\n      _: TranslationFunction\n    ): Promise<\n      Array<{ extensionModulePath: string, result: ExtensionLoadingResult }>\n    > {\n      return Promise.resolve(\n        jsExtensions\n          .filter(({ name }) => !filterExamples || !name.includes('Example'))\n          .map(({ name, extensionModule, objectsRenderingServiceModules }) => {\n            // Load any editor for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsEditorService &&\n              extensionModule.registerEditorConfigurations\n            ) {\n              extensionModule.registerEditorConfigurations(\n                objectsEditorService\n              );\n            }\n\n            // Register modules for ObjectsRenderingService\n            if (objectsRenderingService && objectsRenderingServiceModules) {\n              for (let requirePath in objectsRenderingServiceModules) {\n                objectsRenderingService.registerModule(\n                  requirePath,\n                  objectsRenderingServiceModules[requirePath]\n                );\n              }\n            }\n\n            // Load any renderer for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsRenderingService &&\n              extensionModule.registerInstanceRenderers\n            ) {\n              extensionModule.registerInstanceRenderers(\n                objectsRenderingService\n              );\n            }\n\n            return {\n              extensionModulePath: 'internal-extension://' + name,\n              result: loadExtension(\n                _,\n                gd,\n                gd.JsPlatform.get(),\n                extensionModule\n              ),\n            };\n          })\n      );\n    },\n  };\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport { serializeToJSON } from '../../Utils/Serializer';\nimport GoogleDrive from '../../UI/CustomSvgIcons/GoogleDrive';\nimport GoogleDriveSaveAsDialog from './GoogleDriveSaveAsDialog';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { type AppArguments } from '../../Utils/Window';\nimport { loadScript } from '../../Utils/LoadScript';\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst DEVELOPER_KEY = isDev\n  ? 'AIzaSyDH3UNpxzIpcTyd6aMCWI5oNFSptG_BhOc'\n  : 'AIzaSyDJYQmzLCfjXnNImDa1X_cDTWjl2BOrcM4';\nconst CLIENT_ID = isDev\n  ? '28563107180-bd29h9f3og4h1632m94nv6hat2igrej6.apps.googleusercontent.com'\n  : '44882707384-3t4tubr3fbht87sbtdp7u5mlo45k5uku.apps.googleusercontent.com';\nconst APP_ID = isDev ? '28563107180' : '44882707384'; // This is the first part of CLIENT_ID.\nconst DISCOVERY_DOCS = [\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n];\nconst SCOPE =\n  'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.install';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Google Drive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = loadScript('https://apis.google.com/js/api:client.js')\n    .then(() => {\n      const gapi = global.gapi;\n      if (!gapi) {\n        throw new Error(\n          'No gapi global object found after loading Google Drive API script'\n        );\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.load('client:auth2:picker', {\n          callback: () => {\n            const auth2LoadPromise = gapi.auth2.init({\n              apiKey: DEVELOPER_KEY,\n              clientId: CLIENT_ID,\n              discoveryDocs: DISCOVERY_DOCS,\n              scope: SCOPE,\n            });\n\n            gapi.client.setApiKey(DEVELOPER_KEY);\n            const driveLoadPromise = gapi.client.load('drive', 'v3');\n\n            resolve(Promise.all([auth2LoadPromise, driveLoadPromise]));\n          },\n          onerror: () => {\n            reject(\n              new Error(\n                'Unable to load auth2 and picker APIs for Google Drive.'\n              )\n            );\n          },\n        });\n      });\n    })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Google Drive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype GoogleUser = {\n  getAuthResponse: () => { access_token: string, error?: ?Error },\n};\n\nlet isAuthenticated = false;\n\n/**\n * Sign in the user to Google Drive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<GoogleUser> => {\n  return initializeApis().then(() => {\n    const gapi = global.gapi;\n    const googleAuth = gapi.auth2.getAuthInstance();\n    if (isAuthenticated && googleAuth.isSignedIn.get()) {\n      return googleAuth.currentUser.get();\n    }\n\n    isAuthenticated = false;\n    googleAuth.isSignedIn.listen(authenticated => {\n      console.info('Authenticated with Google APIs: ', authenticated);\n      isAuthenticated = authenticated;\n    });\n    return googleAuth\n      .signIn({ scope: SCOPE })\n      .then((googleUser: GoogleUser) => {\n        if (\n          !googleUser.getAuthResponse() ||\n          googleUser.getAuthResponse().error\n        ) {\n          console.error(\n            'OAuth2 error while sign in:',\n            googleUser.getAuthResponse()\n              ? googleUser.getAuthResponse().error\n              : 'No AuthResponse'\n          );\n          throw new Error('Authentication error');\n        }\n\n        isAuthenticated = true;\n        return googleUser;\n      });\n  });\n};\n\n/**\n * Update a JSON file, given its file id.\n */\nexport const patchJsonFile = (\n  fileId: string,\n  googleUser: GoogleUser,\n  content: string\n): Promise<void> => {\n  return fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}`, {\n    method: 'PATCH',\n    headers: new Headers({\n      Authorization: `Bearer ${googleUser.getAuthResponse().access_token}`,\n      'Content-Type': 'application/json',\n    }),\n    body: content,\n  }).then(res => {\n    if (res.status !== 200) {\n      if (res.status === 401) {\n        isAuthenticated = false;\n      }\n\n      throw res;\n    }\n  });\n};\n\n/**\n * Create a new empty JSON file, returning its fileid.\n */\nexport const createNewJsonFile = (\n  parentId: string,\n  name: string\n): Promise<string> => {\n  const gapi = global.gapi;\n\n  return gapi.client.drive.files\n    .create({\n      'content-type': 'application/json',\n      uploadType: 'multipart',\n      name: name,\n      parents: [parentId],\n      mimeType: 'application/json',\n      fields: 'id, name, kind, size',\n    })\n    .then(apiResponse => {\n      return apiResponse.result.id;\n    });\n};\n\n/**\n * Information about a file or folder picked by the user.\n */\nexport type GoogleDriveFileOrFolder =\n  | {|\n      type: 'FOLDER',\n      id: string,\n      name: string,\n    |}\n  | {|\n      type: 'FILE',\n      id: string,\n      name: string,\n      parentId: string,\n    |};\n\nexport type GoogleDriveFilePickerOptions = {|\n  selectFolderEnabled: boolean,\n  showUploadView: boolean,\n|};\n\n/**\n * Display a file picker as a modal, resolving with the selected file or folder,\n * if any.\n *\n * The picker dialog is not playing nice with material-ui dialogs or overlays. They should\n * not be displayed when the picker is on screen.\n */\nconst showFilePicker = ({\n  selectFolderEnabled,\n  showUploadView,\n}: GoogleDriveFilePickerOptions): Promise<?GoogleDriveFileOrFolder> => {\n  return authenticate().then(googleUser => {\n    const google = global.google;\n\n    return new Promise(resolve => {\n      let picker = null;\n      const pickerBuilder = new google.picker.PickerBuilder()\n        .addView(\n          new google.picker.DocsView()\n            .setIncludeFolders(true)\n            .setSelectFolderEnabled(selectFolderEnabled)\n        )\n        .setOAuthToken(googleUser.getAuthResponse().access_token)\n        .setDeveloperKey(DEVELOPER_KEY)\n        .setAppId(APP_ID) // App ID is required to correctly identify files created with the app.\n        .setCallback(data => {\n          if (\n            data[google.picker.Response.ACTION] === google.picker.Action.PICKED\n          ) {\n            const doc = data[google.picker.Response.DOCUMENTS][0];\n            const id: string = doc[google.picker.Document.ID];\n            const name: string = doc[google.picker.Document.NAME];\n            const parentId: string = doc[google.picker.Document.PARENT_ID];\n            if (\n              doc[google.picker.Document.TYPE] ===\n                google.picker.Type.LOCATION ||\n              doc[google.picker.Document.MIME_TYPE] ===\n                'application/vnd.google-apps.folder'\n            ) {\n              resolve({ id, name, type: 'FOLDER' });\n            } else {\n              resolve({ id, name, type: 'FILE', parentId });\n            }\n            if (picker) picker.dispose();\n          } else if (\n            data[google.picker.Response.ACTION] === google.picker.Action.CANCEL\n          ) {\n            resolve(null);\n            if (picker) picker.dispose();\n          }\n        });\n      if (showUploadView) {\n        pickerBuilder.addView(\n          new google.picker.DocsUploadView().setIncludeFolders(true)\n        );\n      }\n\n      picker = pickerBuilder.build();\n\n      picker.setVisible(true);\n      const pickerElements = document.getElementsByClassName('picker-dialog');\n      for (var i = 0; i < pickerElements.length; ++i) {\n        pickerElements[i].style.zIndex = '5000'; // Higher than Material UI modals\n      }\n    });\n  });\n};\n\n/**\n * A storage that is using Google Drive to open and store files.\n */\nexport default ({\n  internalName: 'GoogleDrive',\n  name: t`Google Drive`,\n  renderIcon: () => <GoogleDrive />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (appArguments.state) {\n      try {\n        // See \"state\" argument passed by Google Drive API:\n        // https://developers.google.com/drive/api/v3/enable-sdk#construct\n        const googleDriveState = JSON.parse(appArguments.state);\n        if (googleDriveState.ids && googleDriveState.ids[0]) {\n          return {\n            fileIdentifier: googleDriveState.ids[0],\n          };\n        }\n      } catch (e) {\n        console.warn(\n          \"Error while trying to parse the Google Drive 'ids' in 'state' from the app arguments.\"\n        );\n      }\n    }\n\n    return null;\n  },\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {\n      // Ignore error as we'll retry later.\n    });\n\n    return {\n      doesInitialOpenRequireUserInteraction: true, // Authentication will open a popup, requiring user interaction\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        return authenticate()\n          .then(googleUser =>\n            fetch(\n              `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,\n              {\n                method: 'GET',\n                headers: new Headers({\n                  Authorization: `Bearer ${\n                    googleUser.getAuthResponse().access_token\n                  }`,\n                }),\n              }\n            )\n          )\n          .then(\n            response => {\n              return response.text().then(\n                fileContent => {\n                  return new Promise((resolve, reject) => {\n                    try {\n                      const dataObject = JSON.parse(fileContent);\n                      return resolve({\n                        content: dataObject,\n                      });\n                    } catch (ex) {\n                      return reject(fileId + ' is a corrupted/malformed file.');\n                    }\n                  });\n                },\n                error => {\n                  console.error(\n                    'Error while reading the file from Google Drive API: ',\n                    error\n                  );\n                  throw error;\n                }\n              );\n            },\n            error => {\n              console.error(\n                'Error while fetching the file from Google Drive API: ',\n                error\n              );\n              throw error;\n            }\n          );\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return authenticate()\n          .then(googleUser =>\n            showFilePicker({ selectFolderEnabled: false, showUploadView: true })\n          )\n          .then(googleDriveFileOrFolder => {\n            if (!googleDriveFileOrFolder) {\n              return null;\n            }\n\n            return {\n              fileIdentifier: googleDriveFileOrFolder.id,\n            };\n          });\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        const content = serializeToJSON(project);\n        return authenticate()\n          .then(googleUser => patchJsonFile(fileId, googleUser, content))\n          .then(() => ({\n            wasSaved: true,\n            fileMetadata,\n          }));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return new Promise(resolve => {\n          setDialog(() => (\n            <GoogleDriveSaveAsDialog\n              onShowFilePicker={showFilePicker}\n              onCancel={() => {\n                closeDialog();\n                resolve({ wasSaved: false, fileMetadata });\n              }}\n              onSave={({ selectedFileOrFolder, newFileName }) => {\n                const content = serializeToJSON(project);\n\n                if (selectedFileOrFolder.type === 'FOLDER') {\n                  return authenticate().then(googleUser =>\n                    createNewJsonFile(\n                      selectedFileOrFolder.id,\n                      newFileName\n                    ).then(newFileId =>\n                      patchJsonFile(newFileId, googleUser, content).then(() => {\n                        closeDialog();\n                        resolve({\n                          wasSaved: true,\n                          fileMetadata: {\n                            fileIdentifier: newFileId,\n                          },\n                        });\n                      })\n                    )\n                  );\n                } else {\n                  return authenticate()\n                    .then(googleUser =>\n                      patchJsonFile(\n                        selectedFileOrFolder.id,\n                        googleUser,\n                        content\n                      )\n                    )\n                    .then(() => {\n                      closeDialog();\n                      resolve({\n                        wasSaved: true,\n                        fileMetadata: {\n                          fileIdentifier: selectedFileOrFolder.id,\n                        },\n                      });\n                    });\n                }\n              }}\n            />\n          ));\n        });\n      },\n      getOpenErrorMessage: (error: Error): MessageDescriptor => {\n        if (!apisLoaded) {\n          return t`Google Drive could not be loaded. Check that you are not offline and have a proper internet connection, then try again.`;\n        }\n\n        return t`Check that you don't have any blocked popup (if so, allow them and retry) and that you have the authorizations for reading the file you're trying to access.`;\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M7.71,3.5L1.15,15L4.58,21L11.13,9.5M9.73,15L6.3,21H19.42L22.85,15M22.28,14L15.42,2H8.58L8.57,2L15.43,14H22.28Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport TextField from '../../UI/TextField';\nimport { type GoogleDriveFileOrFolder } from '.';\n\ntype Props = {|\n  floatingLabelText: React.Node,\n  value: ?GoogleDriveFileOrFolder,\n  onOpenPicker: () => void,\n|};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n    width: '100%',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\nexport default (props: Props) => {\n  return (\n    <div\n      style={{\n        ...styles.container,\n      }}\n    >\n      <TextField\n        style={styles.textField}\n        floatingLabelText={props.floatingLabelText}\n        floatingLabelFixed\n        type=\"text\"\n        hintText={t`Choose a file or folder`}\n        value={props.value ? props.value.name : ''}\n        onChange={() => {}}\n      />\n      <RaisedButton\n        label={<Trans>Choose...</Trans>}\n        primary\n        style={styles.button}\n        onClick={props.onOpenPicker}\n      />\n    </div>\n  );\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport { Column, Line } from '../../UI/Grid';\nimport GoogleDriveFileOrFolderPicker from './GoogleDriveFileOrFolderPicker';\nimport {\n  type GoogleDriveFileOrFolder,\n  type GoogleDriveFilePickerOptions,\n} from '.';\nimport TextField from '../../UI/TextField';\nimport LeftLoader from '../../UI/LeftLoader';\nimport AlertMessage from '../../UI/AlertMessage';\n\ntype Props = {|\n  onCancel: () => void,\n  onSave: ({|\n    selectedFileOrFolder: GoogleDriveFileOrFolder,\n    newFileName: string,\n  |}) => Promise<void>,\n  onShowFilePicker: GoogleDriveFilePickerOptions => Promise<?GoogleDriveFileOrFolder>,\n|};\n\n/**\n * A \"Save as\" dialog for Google Drive, allowing to pick a file to overwrite or a folder\n * and a new filename where to save the game.\n */\nexport default (props: Props) => {\n  const [selectedFileOrFolder, setSelectedFileOrFolder] = React.useState(\n    (null: ?GoogleDriveFileOrFolder)\n  );\n  const [newFileName, setNewFileName] = React.useState('');\n  const [saving, setSaving] = React.useState(false);\n  const [saveError, setSaveError] = React.useState((null: ?Error));\n  const [pickerError, setPickerError] = React.useState((null: ?Error));\n  const [dialogHidden, hideDialog] = React.useState(false);\n\n  const canSave = () => {\n    if (saving) return;\n    if (!selectedFileOrFolder) return;\n\n    return selectedFileOrFolder.type === 'FOLDER' ? !!newFileName : true;\n  };\n  const save = () => {\n    if (!selectedFileOrFolder) return;\n\n    setSaveError(null);\n    setSaving(true);\n    props\n      .onSave({\n        selectedFileOrFolder,\n        newFileName,\n      })\n      .catch(error => {\n        setSaveError(error);\n        setSaving(false);\n      });\n  };\n  const canCancel = () => !saving;\n  const cancel = () => {\n    if (!canCancel()) return;\n\n    props.onCancel();\n  };\n  const openPicker = () => {\n    hideDialog(true);\n    setPickerError(null);\n    props\n      .onShowFilePicker({ selectFolderEnabled: true, showUploadView: false })\n      .then(selectedFileOrFolder => {\n        setSelectedFileOrFolder(selectedFileOrFolder);\n        hideDialog(false);\n      })\n      .catch(error => {\n        setPickerError(error);\n        hideDialog(false);\n      });\n  };\n\n  // Hide the dialog while the picker is opened, as it does not play nice with material-ui's\n  // Dialog.\n  if (dialogHidden) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      title={<Trans>Save on Google Drive</Trans>}\n      actions={[\n        <FlatButton\n          key=\"cancel\"\n          label={<Trans>Cancel</Trans>}\n          primary={false}\n          disabled={!canCancel()}\n          onClick={props.onCancel}\n        />,\n        <LeftLoader key=\"save\" isLoading={saving}>\n          <FlatButton\n            label={<Trans>Save</Trans>}\n            primary\n            disabled={!canSave()}\n            onClick={save}\n          />\n        </LeftLoader>,\n      ]}\n      cannotBeDismissed={true}\n      open\n      onRequestClose={cancel}\n      maxWidth=\"sm\"\n    >\n      <Column noMargin>\n        <Line>\n          <GoogleDriveFileOrFolderPicker\n            floatingLabelText={\n              <Trans>Google Drive folder or existing file to overwrite</Trans>\n            }\n            value={selectedFileOrFolder}\n            onOpenPicker={openPicker}\n          />\n        </Line>\n        <Line>\n          {selectedFileOrFolder && selectedFileOrFolder.type === 'FOLDER' ? (\n            <TextField\n              floatingLabelText={<Trans>New file name</Trans>}\n              floatingLabelFixed\n              type=\"text\"\n              hintText={t`YourGame.json`}\n              value={newFileName}\n              onChange={(event, newFileName) => setNewFileName(newFileName)}\n              fullWidth\n            />\n          ) : null}\n        </Line>\n        {saveError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when saving your game. Verify that you have the\n              rights on the folder or file that you selected and try again.\n            </AlertMessage>\n          </Line>\n        )}\n        {pickerError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when selecting a file or folder from Google\n              Drive. Try again later or verify that you are properly connected\n              to Google Drive.\n            </AlertMessage>\n          </Line>\n        )}\n      </Column>\n    </Dialog>\n  );\n};\n","// @flow\nimport { getIDEVersion } from '../Version';\n\ntype FileSet =\n  | 'preview'\n  | 'cordova'\n  | 'electron'\n  | 'web'\n  | 'cocos2d-js'\n  | 'facebook-instant-games';\n\nconst filesToDownload: { [FileSet]: Array<string> } = {\n  preview: ['/Runtime/index.html'],\n  web: ['/Runtime/index.html'],\n  'cocos2d-js': [\n    '/Runtime/Cocos2d/cocos2d-js-v3.10.js',\n    '/Runtime/Cocos2d/index.html',\n    '/Runtime/Cocos2d/main.js',\n    '/Runtime/Cocos2d/project.json',\n  ],\n  'facebook-instant-games': [\n    '/Runtime/FacebookInstantGames/fbapp-config.json',\n    '/Runtime/FacebookInstantGames/index.html',\n  ],\n  cordova: [\n    '/Runtime/Cordova/www/index.html',\n    '/Runtime/Cordova/config.xml',\n    '/Runtime/Cordova/package.json',\n  ],\n  electron: [\n    '/Runtime/index.html',\n    '/Runtime/Electron/main.js',\n    '/Runtime/Electron/package.json',\n  ],\n};\n\nexport type TextFileDescriptor = {| text: string, filePath: string |};\n\nexport const findGDJS = (\n  fileSet: FileSet\n): Promise<{|\n  gdjsRoot: string,\n  filesContent: Array<TextFileDescriptor>,\n|}> => {\n  // Get GDJS for this version. If you updated the version,\n  // run `newIDE/web-app/scripts/deploy-GDJS-Runtime` script.\n  const gdjsRoot = `https://resources.gdevelop-app.com/GDJS-${getIDEVersion()}`;\n\n  return Promise.all(\n    filesToDownload[fileSet].map(relativeFilePath => {\n      const url = gdjsRoot + relativeFilePath;\n\n      // Don't do any caching, rely on the browser cache only.\n      return fetch(url).then(response => {\n        if (!response.ok) {\n          console.error(`Error while downloading \"${url}\"`, response);\n          throw new Error(\n            `Error while downloading \"${url}\" (status: ${response.status})`\n          );\n        }\n        return response.text().then(text => ({\n          filePath: url,\n          text,\n        }));\n      });\n    })\n  ).then(filesContent => {\n    return {\n      gdjsRoot,\n      filesContent,\n    };\n  });\n};\n","// @flow\nimport path from 'path';\nconst gd: libGDevelop = global.gd;\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\ntype ConstructorArgs = {|\n  textFiles: Array<TextFileDescriptor>,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.substr(0, 7) === 'http://' ||\n    filename.substr(0, 8) === 'https://' ||\n    filename.substr(0, 6) === 'ftp://'\n  );\n};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\nconst pathPosix = path.posix || path;\n\n// TODO: Merge BrowserS3FileSystem into this? The way URLs are handled\n// is different though (BrowserS3FileSystem is not downloading anything\n// from URLs, while this file system does download files).\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop exports.\n */\nexport default class BrowserFileSystem {\n  // The representation of the \"file system\":\n\n  /**\n   * Store all the text files (filepath => content)\n   * @private\n   */\n  _textFiles: { [string]: string } = {};\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  /**\n   * Create a new in-memory file system.\n   */\n  constructor({ textFiles }: ConstructorArgs) {\n    textFiles.forEach(textFileDescriptor => {\n      this._textFiles[textFileDescriptor.filePath] = textFileDescriptor.text;\n    });\n  }\n\n  /**\n   * Returns all the in memory text files with the specified path prefix.\n   */\n  getAllTextFilesIn = (pathPrefix: string): Array<TextFileDescriptor> => {\n    return Object.keys(this._textFiles)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        text: this._textFiles[filePath],\n      }));\n  };\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  dirExists = (path: string) => {\n    // TODO: To be changed to be EnsureDirExists.\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Clear the files to be written in the specified directory.\n    const filePaths = Object.keys(this._textFiles);\n    filePaths.forEach(filePath => {\n      if (filePath.indexOf(path) === 0) {\n        delete this._textFiles[filePath];\n      }\n    });\n\n    return true;\n  };\n  getTempDir = () => {\n    return '/browser-file-system-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    return pathPosix.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    return pathPosix.dirname(fullpath);\n  };\n  makeAbsolute = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    // URLs are always absolute\n    if (isURL(filePathOrURL)) return filePathOrURL;\n\n    if (!this.isAbsolute(baseDirectoryOrURL))\n      baseDirectoryOrURL = pathPosix.resolve(baseDirectoryOrURL);\n\n    return pathPosix.resolve(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  makeRelative = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    if (isURL(filePathOrURL)) {\n      // Cutting the start if the URL is relative to the base URL\n      if (filePathOrURL.indexOf(baseDirectoryOrURL) === 0) {\n        return filePathOrURL.substring(baseDirectoryOrURL.length);\n      }\n\n      // Keep the URL \"absolute\" if on different domains.\n      console.warn(\n        `${filePathOrURL} cannot be made relative to ${baseDirectoryOrURL}, please double check this behavior is correct.`\n      );\n      return filePathOrURL;\n    }\n\n    // Paths are treated as usual paths.\n    return pathPosix.relative(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  isAbsolute = (fullpath: string) => {\n    // URLs are always absolute\n    if (isURL(fullpath)) return true;\n\n    // Paths are absolute if starting from the root\n    return fullpath.length > 0 && fullpath.charAt(0) === '/';\n  };\n\n  copyFile = (source: string, dest: string) => {\n    // URLs are not copied, but marked as to be downloaded.\n    if (isURL(source)) {\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    // If this is a file that we have already in memory,\n    // copy its path.\n    if (!!this._textFiles[source]) {\n      this._textFiles[pathPosix.normalize(dest)] = this._textFiles[source];\n      return true;\n    }\n\n    console.error(`File not found in copyFile (from ${source} to ${dest}).`);\n    return false;\n  };\n\n  writeToFile = (filePath: string, content: string) => {\n    this._textFiles[pathPosix.normalize(filePath)] = content;\n    return true;\n  };\n\n  readFile = (file: string): string => {\n    if (this._textFiles[file]) return this._textFiles[file];\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    Object.keys(this._filesToDownload).forEach(filePath => {\n      const upperCaseFilePath = filePath.toUpperCase();\n      if (\n        upperCaseFilePath.indexOf(ext) ===\n        upperCaseFilePath.length - ext.length\n      ) {\n        output.push_back(filePath);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filePath: string) => {\n    if (isURL(filePath)) return true;\n\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    return (\n      !!this._textFiles[normalizedFilePath] ||\n      !!this._filesToDownload[normalizedFilePath]\n    );\n  };\n}\n","// @flow\n\nimport { initializeZipJs } from './Zip.js';\nimport path from 'path';\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\nconst addSearchParameterToUrl = (\n  url: string,\n  urlEncodedParameterName: string,\n  urlEncodedValue: string\n) => {\n  const separator = url.indexOf('?') === -1 ? '?' : '&';\n  return url + separator + urlEncodedParameterName + '=' + urlEncodedValue;\n};\n\nfunction eachCallback<T>(\n  array: Array<T>,\n  callback: (T, () => void) => void,\n  done: () => void\n) {\n  if (!array.length) {\n    done();\n    return;\n  }\n  let index = 0;\n\n  const callNextCallback = () => {\n    callback(array[index], () => {\n      index++;\n      if (index >= array.length) {\n        done();\n      } else {\n        callNextCallback();\n      }\n    });\n  };\n\n  callNextCallback();\n}\n\nexport const downloadUrlsToBlobs = async ({\n  urlFiles,\n  onProgress,\n}: {|\n  urlFiles: Array<UrlFileDescriptor>,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Array<BlobFileDescriptor>> => {\n  let count = 0;\n  return Promise.all(\n    urlFiles\n      .filter(({ url }) => url.indexOf('.h') === -1) // TODO\n      .map(({ url, filePath }) => {\n        // To avoid strange/hard to understand CORS issues, we add a dummy parameter.\n        // By doing so, we force browser to consider this URL as different than the one traditionally\n        // used to render the resource in the editor (usually as an `<img>` or as a background image).\n        // If we don't add this distinct parameter, it can happen that browsers fail to load the image\n        // as it's already in the **browser cache** but with slightly different request parameters -\n        // making the CORS checks fail (even if it's coming from the browser cache).\n        //\n        // It's happening sometimes (according to loading order probably) in Chrome and (more often)\n        // in Safari. It might be linked to Amazon S3 + CloudFront that \"doesn't support the Vary: Origin header\".\n        // To be safe, we entirely avoid the issue with this parameter, making the browsers consider\n        // the resources for use in Pixi.js and for the rest of the editor as entirely separate.\n        //\n        // See:\n        // - https://stackoverflow.com/questions/26140487/cross-origin-amazon-s3-not-working-using-chrome\n        // - https://stackoverflow.com/questions/20253472/cors-problems-with-amazon-s3-on-the-latest-chomium-and-google-canary\n        // - https://stackoverflow.com/a/20299333\n        //\n        // Search for \"cors-cache-workaround\" in the codebase for the same workarounds.\n        const urlWithParameters = addSearchParameterToUrl(\n          url,\n          'gdUsage',\n          'export'\n        );\n\n        return fetch(urlWithParameters)\n          .then(\n            response => {\n              if (!response.ok) {\n                console.error(\n                  `Error while downloading \"${urlWithParameters}\"`,\n                  response\n                );\n                throw new Error(\n                  `Error while downloading \"${urlWithParameters}\" (status: ${\n                    response.status\n                  })`\n                );\n              }\n              return response.blob();\n            },\n            error => {\n              console.error(\n                `Error while downloading \"${urlWithParameters}\"`,\n                error\n              );\n              throw new Error(\n                `Error while downloading \"${urlWithParameters}\" (network error)`\n              );\n            }\n          )\n          .then(blob => {\n            count++;\n            onProgress(count, urlFiles.length);\n            return {\n              filePath,\n              blob,\n            };\n          });\n      })\n  ).then((downloadedBlobs: Array<BlobFileDescriptor>) => {\n    console.info('All downloads done');\n    return downloadedBlobs;\n  });\n};\n\n/**\n * Archive the specified blobs and texts into a zip file,\n * returned as a blob.\n */\nexport const archiveFiles = async ({\n  textFiles,\n  blobFiles,\n  basePath,\n  onProgress,\n}: {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n  basePath: string,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Blob> => {\n  const zipJs: ZipJs = await initializeZipJs();\n\n  let zippedFilesCount = 0;\n  let totalFilesCount = blobFiles.length + textFiles.length;\n\n  return new Promise((resolve, reject) => {\n    zipJs.createWriter(\n      new zipJs.BlobWriter('application/zip'),\n      function(zipWriter) {\n        eachCallback(\n          blobFiles,\n          ({ filePath, blob }, done) => {\n            // All files in a zip are relative\n            const relativeFilePath = path.relative(basePath, filePath);\n\n            zipWriter.add(\n              relativeFilePath,\n              new zipJs.BlobReader(blob),\n              () => {\n                zippedFilesCount++;\n                onProgress(zippedFilesCount, totalFilesCount);\n                done();\n              },\n              () => {\n                /* We don't track progress at the file level */\n              }\n            );\n          },\n          () => {\n            eachCallback(\n              textFiles,\n              ({ filePath, text }, done) => {\n                // All files in a zip are relative\n                const relativeFilePath = path.relative(basePath, filePath);\n\n                zipWriter.add(\n                  relativeFilePath,\n                  new zipJs.TextReader(text),\n                  () => {\n                    zippedFilesCount++;\n                    onProgress(zippedFilesCount, totalFilesCount);\n                    done();\n                  },\n                  () => {\n                    /* We don't track progress at the file level */\n                  }\n                );\n              },\n              () => {\n                zipWriter.close((blob: Blob) => {\n                  resolve(blob);\n                });\n              }\n            );\n          }\n        );\n      },\n      error => {\n        console.error('Error while making zip:', error);\n        reject(error);\n      }\n    );\n  });\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { browserOnlineCordovaExportPipeline } from './BrowserOnlineCordovaExport.js';\nimport { browserOnlineElectronExportPipeline } from './BrowserOnlineElectronExport.js';\nimport { browserOnlineWebExportPipeline } from './BrowserOnlineWebExport';\nimport { browserHTML5ExportPipeline } from './BrowserHTML5Export';\nimport { browserCordovaExportPipeline } from './BrowserCordovaExport';\nimport { browserElectronExportPipeline } from './BrowserElectronExport';\nimport { browserCocos2dExportPipeline } from './BrowserCocos2dExport';\nimport { browserFacebookInstantGamesExportPipeline } from './BrowserFacebookInstantGamesExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getBrowserExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'browseronlinecordovaexport',\n    exportPipeline: browserOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'browsers3export',\n    exportPipeline: browserOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>HTML5 game (zip)</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'browserhtml5export',\n    exportPipeline: browserHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'browserfacebookinstantgames',\n    exportPipeline: browserFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually then\n        to iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'browsercordovaexport',\n    exportPipeline: browserCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'browseronlineelectronexport',\n    exportPipeline: browserOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'browserelectronexport',\n    exportPipeline: browserElectronExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Cocos2d-JS</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cocos2d-js',\n    description: (\n      <Trans>\n        Export your game using Cocos2d-JS game engine. The game can be compiled\n        for Android or iOS if you install Cocos2d-JS developer tools.\n      </Trans>\n    ),\n    key: 'browsercocos2dexport',\n    exportPipeline: browserCocos2dExportPipeline,\n    experimental: true,\n  },\n];\n\n/**\n * Open an URL generated from a blob, to download it with the specified filename.\n */\nexport const openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n  blob: ?Blob,\n  children: (blobDownloadUrl: string) => React.Node,\n};\n\nexport const BlobDownloadUrlHolder = ({ blob, children }: Props) => {\n  const [blobDownloadUrl, setBlobDownloadUrl] = React.useState('');\n  React.useEffect(\n    () => {\n      // Release the existing blob URL, if any.\n      if (blobDownloadUrl) {\n        URL.revokeObjectURL(blobDownloadUrl);\n      }\n\n      if (blob) {\n        setBlobDownloadUrl(URL.createObjectURL(blob));\n      } else {\n        setBlobDownloadUrl('');\n      }\n\n      return () => {\n        // Release the blob URL if component is unmounted.\n        if (blobDownloadUrl) {\n          URL.revokeObjectURL(blobDownloadUrl);\n        }\n      };\n    },\n    [blob, blobDownloadUrl]\n  );\n\n  return children(blobDownloadUrl);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport axios from 'axios';\nimport {\n  POSITIONAL_ARGUMENTS_KEY,\n  type AppArguments,\n} from '../../Utils/Window';\n\nconst isURL = (filename: string) => {\n  return (\n    filename.substr(0, 7) === 'http://' ||\n    filename.substr(0, 8) === 'https://' ||\n    filename.substr(0, 6) === 'ftp://'\n  );\n};\n\nconst isDeprecatedExampleSchemeURL = (filename: string) => {\n  return filename.startsWith('example://');\n};\n\n/**\n * Storage allowing to download examples from an URL.\n * This is used for examples for the \"Example Store\".\n */\nexport default ({\n  internalName: 'UrlStorageProvider',\n  name: t`URL`,\n  hiddenInOpenDialog: true,\n  hiddenInSaveDialog: true,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    const argument = appArguments[POSITIONAL_ARGUMENTS_KEY][0];\n    if (!isURL(argument) && !isDeprecatedExampleSchemeURL(argument))\n      return null;\n\n    return {\n      fileIdentifier: argument,\n    };\n  },\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onOpen: async (fileMetadata: FileMetadata) => {\n      let url = fileMetadata.fileIdentifier;\n\n      // Backward compatibility with URL arguments that were like \"example://particle-effects-demo\".\n      if (isDeprecatedExampleSchemeURL(url)) {\n        const exampleName = url.replace('example://', '');\n        url = `https://resources.gdevelop-app.com/examples/${exampleName}/${exampleName}.json`;\n      }\n\n      const response = await axios.get(url);\n      if (!response.data)\n        throw new Error(\"Can't parse data from the URL (is it valid JSON?)\");\n\n      return {\n        content: response.data,\n      };\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport axios from 'axios';\nimport { GDevelopGamePreviews } from './ApiConfigs';\nimport { getSignedUrl } from './Usage';\n\nexport type UploadedObject = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\nexport const uploadObject = (params: UploadedObject): Promise<any> => {\n  return getSignedUrl({\n    uploadType: 'preview',\n    key: params.Key,\n    contentType: params.ContentType,\n  }).then(({ signedUrl }) =>\n    axios.put(signedUrl, params.Body, {\n      headers: {\n        'Content-Type': params.ContentType,\n      },\n    })\n  );\n};\n\nexport const getBaseUrl = () => {\n  return GDevelopGamePreviews.baseUrl;\n};\n","// @flow\nimport axios from 'axios';\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadBlobFile = (\n  blob: Blob,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  return axios\n    .put(uploadOptions.signedUrl, blob, {\n      headers: {\n        'Content-Type': uploadOptions.contentType,\n      },\n      // Allow any arbitrary large file to be sent\n      maxContentLength: Infinity,\n      onUploadProgress: progressEvent => {\n        if (!progressEvent || !progressEvent.total) {\n          onProgress(0, 0);\n          return;\n        }\n\n        onProgress(progressEvent.loaded, progressEvent.total);\n      },\n    })\n    .then(() => undefined);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport * as React from 'react';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { ExampleStore } from '../AssetStore/ExampleStore';\nimport UrlStorageProvider from '../ProjectsStorage/UrlStorageProvider';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport {\n  getExample,\n  type ExampleShortHeader,\n} from '../Utils/GDevelopServices/Asset';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => Promise<void>,\n|};\n\nexport default function BrowserExamples(props: Props) {\n  const [isOpening, setIsOpening] = React.useState(false);\n\n  return (\n    <I18n>\n      {({ i18n }) => (\n        <ExampleStore\n          isOpening={isOpening}\n          onOpen={async (exampleShortHeader: ExampleShortHeader) => {\n            try {\n              setIsOpening(true);\n              const example = await getExample(exampleShortHeader);\n              props.onOpen(UrlStorageProvider, {\n                fileIdentifier: example.projectFileUrl,\n              });\n              sendNewGameCreated(example.projectFileUrl);\n            } catch (error) {\n              showErrorBox({\n                message:\n                  i18n._(t`Unable to fetch the example.`) +\n                  ' ' +\n                  i18n._(\n                    t`Verify your internet connection or try again later.`\n                  ),\n                rawError: error,\n                errorId: 'browser-example-load-error',\n              });\n            } finally {\n              setIsOpening(false);\n            }\n          }}\n        />\n      )}\n    </I18n>\n  );\n}\n","import { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport Dialog from '../UI/Dialog';\nimport Window from '../Utils/Window';\nimport FlatButton from '../UI/FlatButton';\nimport Text from '../UI/Text';\nimport { ResponsiveWindowMeasurer } from '../UI/Reponsive/ResponsiveWindowMeasurer';\nimport RaisedButton from '../UI/RaisedButton';\nimport { Line } from '../UI/Grid';\n\nexport default class BetaIntroDialog extends Component {\n  _onOpenWebsite() {\n    Window.openExternalURL('http://gdevelop-app.com');\n  }\n\n  render() {\n    const { open, onClose } = this.props;\n\n    return (\n      <ResponsiveWindowMeasurer>\n        {windowWidth => (\n          <Dialog\n            title={<Trans>Welcome to GDevelop</Trans>}\n            actions={[\n              <FlatButton\n                key=\"download\"\n                label={<Trans>Download GDevelop desktop app</Trans>}\n                primary={false}\n                onClick={this._onOpenWebsite}\n              />,\n              <FlatButton\n                label={<Trans>Close</Trans>}\n                primary={false}\n                onClick={onClose}\n                key=\"close\"\n              />,\n            ]}\n            cannotBeDismissed={false}\n            open={open}\n            onRequestClose={onClose}\n          >\n            <div>\n              <Text>\n                <Trans>\n                  This is a version of GDevelop 5 that you can try online.\n                </Trans>\n              </Text>\n              <Text>\n                Choose a <b>new project to create</b>, then edit the scene or\n                the events ruling the game. You can{' '}\n                <b>launch a preview of your game</b> at any time.\n              </Text>\n              <Text>\n                <Trans>\n                  Download the full version of GDevelop on your desktop computer\n                  to create your own game without limits!\n                </Trans>\n              </Text>\n              <Line justifyContent=\"center\">\n                <RaisedButton\n                  label={<Trans>Start using GDevelop</Trans>}\n                  primary\n                  onClick={onClose}\n                />\n              </Line>\n            </div>\n          </Dialog>\n        )}\n      </ResponsiveWindowMeasurer>\n    );\n  }\n}\n","// @flow\nimport Window from '../Utils/Window';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * when running in a browser.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: () => {\n      sendExternalEditorOpened('piskel');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'jfxr-app',\n    displayName: 'Edit with Jfxr',\n    kind: 'audio',\n    edit: () => {\n      sendExternalEditorOpened('jfxr');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'yarn-app',\n    displayName: 'Edit with Yarn',\n    kind: 'json',\n    edit: () => {\n      sendExternalEditorOpened('yarn');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport { uploadObject, getBaseUrl } from '../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../Utils/TimestampedId';\nimport slugs from 'slugs';\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to temporary S3 files.\n */\nexport const makeBrowserS3EventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  const prefix = makeTimestampedId();\n  const getPathFor = (codeNamespace: string) => {\n    return `${prefix}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) =>\n      getBaseUrl() + getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(functionCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading function generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(functionCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(behaviorCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading behavior generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(behaviorCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n  };\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport Window from '../../Utils/Window';\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport Text from '../../UI/Text';\n\ntype Props = {|\n  project: gdProject,\n  onDone: () => void,\n|};\n\nexport default class DownloadSaveAsDialog extends React.Component<Props> {\n  _download = () => {\n    let content = '';\n    try {\n      content = JSON.stringify(serializeToJSObject(this.props.project));\n    } catch (rawError) {\n      showErrorBox({\n        message: 'Unable to save your project',\n        rawError,\n        errorId: 'download-as-json-error',\n      });\n      return;\n    }\n    var uri = encodeURI('data:application/json;charset=utf-8,' + content);\n\n    var downloadLink = document.createElement('a');\n    downloadLink.href = uri;\n    downloadLink.download = 'game.json';\n\n    const { body } = document;\n    if (!body) return;\n\n    body.appendChild(downloadLink);\n    downloadLink.click();\n    body.removeChild(downloadLink);\n  };\n\n  render() {\n    const { onDone } = this.props;\n\n    const actions = [\n      <FlatButton\n        key=\"download\"\n        label={<Trans>Download GDevelop desktop version</Trans>}\n        primary={false}\n        onClick={() => Window.openExternalURL('http://gdevelop-app.com')}\n      />,\n      <FlatButton\n        key=\"close\"\n        label={<Trans>Close</Trans>}\n        primary={false}\n        onClick={onDone}\n      />,\n    ];\n\n    return (\n      <Dialog\n        actions={actions}\n        open\n        cannotBeDismissed={false}\n        onRequestClose={onDone}\n        maxWidth=\"sm\"\n      >\n        <Column noMargin>\n          <Line>\n            <Text>\n              <Trans>\n                You can download the file of your game to continue working on it\n                using the full GDevelop version:\n              </Trans>\n            </Text>\n          </Line>\n          <Line>\n            <Column expand>\n              <RaisedButton\n                label={<Trans>Download game file</Trans>}\n                fullWidth\n                primary\n                onClick={this._download}\n              />\n            </Column>\n          </Line>\n        </Column>\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport DownloadSaveAsDialog from './DownloadSaveAsDialog';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\n\n/**\n * \"Storage\" allowing to download a copy of the game.\n * Used for the web-app.\n */\nexport default ({\n  internalName: 'DownloadFile',\n  name: t`Download a copy`,\n  renderIcon: () => <SaveAlt />,\n  hiddenInOpenDialog: true,\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n      return new Promise(resolve => {\n        setDialog(() => (\n          <DownloadSaveAsDialog\n            onDone={() => {\n              closeDialog();\n              resolve({ wasSaved: false, fileMetadata });\n            }}\n            project={project}\n          />\n        ));\n      });\n    },\n  }),\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M12,14.56L16.35,18.16L18.2,16.95V18.3L12,22L5.82,18.3V16.95L7.68,18.16L12,14.56M7.68,2.5L12,6.09L16.32,2.5L22.5,6.5L18.23,9.94L22.5,13.36L16.32,17.39L12,13.78L7.68,17.39L1.5,13.36L5.77,9.94L1.5,6.5L7.68,2.5M12,13.68L18.13,9.94L12,6.19L5.87,9.94L12,13.68Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport Dropbox from '../../UI/CustomSvgIcons/Dropbox';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Dropbox APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Dropbox APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype DropboxUser = {};\n\n/**\n * Sign in the user to Dropbox, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<DropboxUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using Dropbox to open and store files.\n */\nexport default ({\n  internalName: 'Dropbox',\n  name: t`Dropbox (coming soon)`,\n  disabled: true,\n  renderIcon: () => <Dropbox />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M20.08,13.64C21.17,13.81 22,14.75 22,15.89C22,16.78 21.5,17.55 20.75,17.92L20.58,18H9.18L9.16,18V18C7.71,18 6.54,16.81 6.54,15.36C6.54,13.9 7.72,12.72 9.18,12.72L9.4,12.73L9.39,12.53A3.3,3.3 0 0,1 12.69,9.23C13.97,9.23 15.08,9.96 15.63,11C16.08,10.73 16.62,10.55 17.21,10.55A2.88,2.88 0 0,1 20.09,13.43L20.08,13.64M8.82,12.16C7.21,12.34 5.96,13.7 5.96,15.36C5.96,16.04 6.17,16.66 6.5,17.18H4.73A2.73,2.73 0 0,1 2,14.45C2,13 3.12,11.83 4.53,11.73L4.46,11.06C4.46,9.36 5.84,8 7.54,8C8.17,8 8.77,8.18 9.26,8.5C9.95,7.11 11.4,6.15 13.07,6.15C15.27,6.15 17.08,7.83 17.3,9.97H17.21C16.73,9.97 16.27,10.07 15.84,10.25C15.12,9.25 13.96,8.64 12.69,8.64C10.67,8.64 9,10.19 8.82,12.16Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport OneDrive from '../../UI/CustomSvgIcons/OneDrive';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load OneDrive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading OneDrive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype OneDriveUser = {};\n\n/**\n * Sign in the user to OneDrive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<OneDriveUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using OneDrive to open and store files.\n */\nexport default ({\n  internalName: 'OneDrive',\n  name: t`OneDrive (coming soon)`,\n  disabled: true,\n  renderIcon: () => <OneDrive />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","// @flow\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  // Currently, the web-app only supports resources with URLs.\n  // TODO: Detect non URLs resources and explain that it can be opened\n  // only on the desktop app.\n  return [];\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  return {\n    fetchedResources: [],\n    erroredResources: [],\n  };\n};\n\nexport const BrowserResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","// @flow\nimport * as React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for browser only IDE\nimport BrowserExamples from './ProjectCreation/BrowserExamples';\nimport BrowserStarters from './ProjectCreation/BrowserStarters';\nimport BrowserIntroDialog from './MainFrame/BrowserIntroDialog';\nimport browserResourceSources from './ResourcesList/BrowserResourceSources';\nimport browserResourceExternalEditors from './ResourcesList/BrowserResourceExternalEditors';\nimport BrowserS3PreviewLauncher from './Export/BrowserExporters/BrowserS3PreviewLauncher';\nimport { getBrowserExporters } from './Export/BrowserExporters';\nimport makeExtensionsLoader from './JsExtensionsLoader/BrowserJsExtensionsLoader';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport { makeBrowserS3EventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter';\nimport Providers from './MainFrame/Providers';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport GoogleDriveStorageProvider from './ProjectsStorage/GoogleDriveStorageProvider';\nimport DownloadFileStorageProvider from './ProjectsStorage/DownloadFileStorageProvider';\nimport DropboxStorageProvider from './ProjectsStorage/DropboxStorageProvider';\nimport OneDriveStorageProvider from './ProjectsStorage/OneDriveStorageProvider';\nimport { BrowserResourceFetcher } from './ProjectsStorage/ResourceFetcher/BrowserResourceFetcher';\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  let app = null;\n  const appArguments = Window.getArguments();\n\n  app = (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeBrowserS3EventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={null}\n      eventsFunctionsExtensionOpener={null}\n      resourceFetcher={BrowserResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            UrlStorageProvider,\n            GoogleDriveStorageProvider,\n            DropboxStorageProvider,\n            OneDriveStorageProvider,\n            DownloadFileStorageProvider,\n          ]}\n          defaultStorageProvider={UrlStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderPreviewLauncher={(props, ref) => (\n                <BrowserS3PreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  {...props}\n                  exporters={getBrowserExporters()}\n                  allExportersRequireOnline\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={BrowserExamples}\n                  startersComponent={BrowserStarters}\n                />\n              )}\n              introDialog={<BrowserIntroDialog />}\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={browserResourceSources}\n              resourceExternalEditors={browserResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !Window.isDev(),\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n\n  return app;\n};\n"],"sourceRoot":""}